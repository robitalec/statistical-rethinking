[["index.html", "Learning bayesian data analysis with Statistical Rethinking 1 Overview 1.1 Links 1.2 Seed", " Learning bayesian data analysis with Statistical Rethinking Alec L. Robitaille 2021-08-18 [updated: 2021-09-03] 1 Overview 1.1 Links Link: https://github.com/rmcelreath/statrethinking_winter2019 1.1.1 Adaptations Stan+R: https://vincentarelbundock.github.io/rethinking2/ tidy+rethinking: https://david-salazar.github.io/2020/04/19/statistical-rethinking-week-1/ brms+tidy: https://bookdown.org/content/4857/ 1.1.2 Etc https://chi-feng.github.io/mcmc-demo 1.2 Seed set.seed(42) "],["homework-week-1.html", "2 Homework: Week 1 2.1 Variables 2.2 Joint model 2.3 Question 1 2.4 Question 2 2.5 Question 3", " 2 Homework: Week 1 2021-08-18 [updated: 2021-09-03] 2.1 Variables N: fixed by experimenter p: Prior probability W: A probability distribution given the data. 2.2 Joint model W ~ Binomial(N , p) p ~ Uniform(0, 1) W is distributed binomially with N observations and probability p on each p is distributed uniformally at 1 2.3 Question 1 Suppose the globe tossing data (Chapter 2) had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as in the book. # Size of grid for grid approximation gridsize &lt;- 1000 # Prior grid prior_grid &lt;- seq(0, 1, length.out = gridsize) # Prior probability (all 1) prior_prob &lt;- rep(1, gridsize) # Data probability # given 4/15, using binomial distribution data_prob &lt;- dbinom(8, 15, prob = prior_grid) # Calculate the posterior numerator by multiplying prior and data probability posterior_num &lt;- prior_prob * data_prob # Standardize by sum of posterior numerator posterior &lt;- posterior_num / sum(posterior_num) # Save for later posterior_1 &lt;- posterior plot(posterior, type = &#39;l&#39;) # Sample from posterior samples &lt;- sample(prior_grid, size = gridsize, prob = posterior, replace = TRUE) mean(samples) ## [1] 0.54 PI(samples, .99) ## 1% 100% ## 0.27 0.80 2.4 Question 2 Start over in 1, but now use a prior that is zero below p = 0.5 and a constant above p = 0.5. This corresponds to prior information that a majority of the Earth’s surface is water. What difference does the better prior make? # Size of grid for grid approximation gridsize &lt;- 1000 # Prior grid prior_grid &lt;- seq(0, 1, length.out = gridsize) # Prior probability (all 1 above 0.5, all 0 below) prior_prob &lt;- c(rep(0, gridsize / 2), rep(1, gridsize / 2)) # Data probability # given 4/15, using binomial distribution data_prob &lt;- dbinom(4, 15, prob = prior_grid) # Calculate the posterior numerator by multiplying prior and data probability posterior_num &lt;- prior_prob * data_prob # Standardize by sum of posterior numerator posterior &lt;- posterior_num / sum(posterior_num) # Save for later posterior_2 &lt;- posterior plot(posterior, type = &#39;l&#39;) # Sample from posterior samples &lt;- sample(prior_grid, size = gridsize, prob = posterior, replace = TRUE) mean(samples) ## [1] 0.55 PI(samples, .99) ## 1% 100% ## 0.50 0.72 Narrower curve, higher max, all zeroes before 0.5 2.5 Question 3 For the posterior distribution from 2, compute 89% percentile and HPDI intervals. Compare the widths of these intervals. Which is wider? Why? If you had only the information in the interval, what might you misunderstand about the shape of the posterior distribution? library(rethinking) library(ggplot2) library(data.table) # Calculate Percentile Interval at 89% percent_interval &lt;- PI(posterior, prob = 0.89) percent_interval ## 5% 94% ## 0.0000 0.0073 # Calculate Highest Posterior Density at 89% highest_post_dens &lt;- HPDI(posterior, prob = 0.89) highest_post_dens ## |0.89 0.89| ## 0.0000 0.0025 "],["homework-week-2.html", "3 Homework: Week 2 3.1 Question 1 3.2 Question 2 3.3 Homework: Question 3", " 3 Homework: Week 2 2021-08-24 [updated: 2021-09-03] 3.1 Question 1 The weights listed below were recorded in the !Kung census, but heights were not recorded for these individuals. Provide predicted heights and 89% compatibility intervals for each of these individuals. That is, fill in the table below, using model-based predictions. Individual, weight, expected height, 89% interval 1, 45,,, 2, 40,,, 3, 65,,, 4, 31,,, 5, 53,,, Model: \\(h_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta(x_{i} - \\bar{x})\\) \\(\\alpha \\sim \\text{Normal}(178, 20)\\) \\(\\beta \\sim \\text{Log-Normal}(0, 1)\\) \\(\\sigma \\sim \\text{Uniform}(0, 50)\\) library(rethinking) library(data.table) library(ggplot2) library(tidybayes) theme_set(theme_bw()) data(Howell1) d &lt;- Howell1[Howell1$age &gt;= 18,] m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (weight - mean(d$weight)), a ~ dnorm(178, 20), b ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) precis(m) ## mean sd 5.5% 94.5% ## a 154.6 0.270 154.17 155.03 ## b 0.9 0.042 0.84 0.97 ## sigma 5.1 0.191 4.77 5.38 Simulate: # Set weights to simulate for weights &lt;- data.table(weight = c(45, 40, 65, 31, 54), id = as.character(seq(1, 5))) simmed &lt;- sim(m, list(weight = weights$weight), n = 1e3) # Tidy DT &lt;- melt(as.data.table(simmed), measure.vars = paste0(&#39;V&#39;, 1:5), value.name = &#39;height&#39;, variable.name = &#39;id&#39;) DT[, id := gsub(&#39;V&#39;, &#39;&#39;, id)] DT[weights, weight := weight, on = &#39;id&#39;] # Plot ggplot(DT, aes(height)) + stat_halfeye(.width = .89) + facet_wrap(~id) 3.2 Question 2 Model the relationship between height (cm) and the natural logarithm of weight (log-kg): log(weight). Use the entire Howell1 data frame, all 544 rows, adults and non-adults. Use any model type from Chapter 4 that you think useful: an ordinary linear regression, a polynomial or a spline. Plot the posterior predictions against the raw data library(rethinking) library(data.table) library(ggplot2) library(tidybayes) theme_set(theme_bw()) data(Howell1) d &lt;- Howell1 d$logweight &lt;- log(d$weight) m1 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (logweight - mean(d$logweight)), a ~ dnorm(178, 20), b ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) sim_x &lt;- log(1:60) simmed &lt;- sim(m1, list(logweight = sim_x)) # Tidy DT &lt;- melt(as.data.table(simmed), value.name = &#39;height&#39;, variable.name = &#39;x&#39;) ## Warning in melt.data.table(as.data.table(simmed), value.name = &quot;height&quot;, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars in ## future. DT[data.table(sim_x, x = paste0(&#39;V&#39;, 1:60)), logweight := sim_x, on = &#39;x&#39;] DT[, meanheight := mean(height), by = logweight] DT[, low := PI(height)[1], by = logweight] DT[, high := PI(height)[2], by = logweight] # Plot ggplot(DT) + geom_ribbon(aes(x = exp(logweight), ymin = low, ymax = high), fill = &#39;grey&#39;) + geom_point(aes(exp(logweight), height), data = d, color = &#39;lightblue&#39;, alpha = 0.8) + geom_line(aes(exp(logweight), meanheight)) Using the dlnorm, prior of a Log normal distribution on beta m2 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (logweight - mean(d$logweight)), a ~ dnorm(178, 20), b ~ dlnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) sim_x &lt;- log(1:60) simmed &lt;- sim(m2, list(logweight = sim_x)) # Tidy DT &lt;- melt(as.data.table(simmed), value.name = &#39;height&#39;, variable.name = &#39;x&#39;) ## Warning in melt.data.table(as.data.table(simmed), value.name = &quot;height&quot;, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars in ## future. DT[data.table(sim_x, x = paste0(&#39;V&#39;, 1:60)), logweight := sim_x, on = &#39;x&#39;] DT[, meanheight := mean(height), by = logweight] DT[, low := PI(height)[1], by = logweight] DT[, high := PI(height)[2], by = logweight] # Plot ggplot(DT) + geom_ribbon(aes(x = exp(logweight), ymin = low, ymax = high), fill = &#39;grey&#39;) + geom_point(aes(exp(logweight), height), data = d, color = &#39;lightblue&#39;, alpha = 0.8) + geom_line(aes(exp(logweight), meanheight)) 3.3 Homework: Question 3 Set up: library(rethinking) library(data.table) library(ggplot2) library(tidybayes) theme_set(theme_bw()) data(Howell1) d &lt;- Howell1 d$weight_s &lt;- scale(d$weight) d$weight_s2 &lt;- scale(d$weight) ^ 2 m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu ~ a + b1 * weight_s + b2 * weight_s2, a ~ dnorm(178, 20), b1 ~ dlnorm(0, 1), b2 ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) n &lt;- 20 sim_x &lt;- seq(min(d$weight_s), max(d$weight_s), length.out = n) linked &lt;- link( m, data = list(weight_s = sim_x, weight_s2 = sim_x ^ 2), post = extract.prior(m) )[1:50,] plot(NULL, xlim = range(sim_x), ylim = range(linked) + c(-10, 10)) apply(linked, 1, FUN = function(x) lines(sim_x, x)) ## NULL m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu ~ a + b1 * weight_s + b2 * weight_s2, a ~ dnorm(178, 20), b1 ~ dlnorm(0, 1), b2 ~ dnorm(0, 10), sigma ~ dunif(0, 50) ), data = d ) n &lt;- 20 sim_x &lt;- seq(min(d$weight_s), max(d$weight_s), length.out = n) linked &lt;- link( m, data = list(weight_s = sim_x, weight_s2 = sim_x ^ 2), post = extract.prior(m) )[1:50,] plot(NULL, xlim = range(sim_x), ylim = range(linked) + c(-10, 10)) apply(linked, 1, FUN = function(x) lines(sim_x, x)) ## NULL "],["homework-week-3.html", "4 Homework: Week 3 4.1 Overview 4.2 Question 1 4.3 Question 2 4.4 Question 3", " 4 Homework: Week 3 2021-08-25 [updated: 2021-09-03] 4.1 Overview All three problems below are based on the same data. The data in data(foxes) are 116 foxes from 30 different urban groups in England. These foxes are like street gangs. Group size varies from 2 to 8 individuals. Each group maintains its own (almost exclusive) urban territory. Some territories are larger than others. The area variable encodes this information. Some territories also have more avgfood than others. We want to model the weight of each fox. For the problems below, assume this DAG 4.1.1 Setup # Packages library(ggdag) library(dagitty) library(data.table) library(ggplot2) library(tidybayes) # DAG dag_plot &lt;- function(dag) { stat &lt;- node_status(dag, FALSE) stat$data$status[is.na(stat$data$status)] &lt;- &#39;intermediate&#39; ggplot(stat, aes(x = x, y = y, xend = xend, yend = yend)) + geom_dag_point(aes(color = status), alpha = 0.5, size = 15) + geom_dag_edges() + labs(color = &#39;&#39;) + geom_dag_text(color = &#39;black&#39;) + scale_color_manual(values = list(&#39;exposure&#39; = &#39;#35608DFF&#39;, &#39;outcome&#39; = &#39;#22A884FF&#39;, &#39;intermediate&#39; = &#39;grey50&#39;)) + theme_void() } dag &lt;- dagify( weight ~ groupsize + avgfood, groupsize ~ avgfood, avgfood ~ area, exposure = &#39;area&#39;, outcome = &#39;weight&#39; ) dag_plot(dag) 4.2 Question 1 Use a model to infer the total causal influence of area on weight. Would increasing the area available to each fox make it heavier (healthier)? You might want to standardize the variables. Regardless, use prior predictive simulation to show that your model’s prior predictions stay within the possible outcome range. 4.2.1 Workings Area on weight scale(weight) ~ dnorm(mu, sigma) mu &lt;- a + b * (scale(area)) a: intercept when weight and area are scaled, the expected intercept is 0 therefore a ~ dnorm(0, 0.5) b: beta, rate of change given one unit of increase in area b ~ dnorm(0, 1) sigma: standard deviation uniform prior sigma ~ dunif(0, 50) 4.2.2 Model library(rethinking) data(foxes) foxes$scale_area &lt;- scale(foxes$area) foxes$scale_weight &lt;- scale(foxes$weight) m1 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bArea * scale_area, a ~ dnorm(0, 0.05), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) 4.2.3 Prior predictive simulation plot_link &lt;- function(DT, n) { data.table(DT)[sample(.N, n), plot(data.table(x = rep(c(-2, 2), .N), y = c(V1, V2)), type = &#39;l&#39;)] } prior &lt;- extract.prior(m1) l &lt;- link(m1, post = prior, data = list(scale_area = c(-2, 2))) plot_link(l, 20) ## NULL 4.2.4 Paths Interest: Area on Weight Paths Area -&gt; Avgfood -&gt; Weight Area -&gt; Avgfood -&gt; Groupsize -&gt; Weight Avgfood and Groupsize are pipes between Area and Weight. There are no backdoors or colliders. 4.2.5 Interpretation Would increasing the area available to each fox make it heavier (healthier)? bArea has a mean of 0.02, with compatibility intervals around 0. Therefore the model does not indicate a total causal influence of area on the weight. precis(m1) ## mean sd 5.5% 94.5% ## a -0.000001 0.044 -0.07 0.07 ## bArea 0.018844 0.091 -0.13 0.16 ## sigma 0.995497 0.065 0.89 1.10 post &lt;- extract.samples(m1) s &lt;- sim(m1, data = list(scale_area = c(-2, 2)), post = post) ggplot(data.table(s), aes(V1)) + stat_halfeye(.width = .89) 4.3 Question 2 Now infer the causal impact of adding food to a territory. Would this make foxes heavier? Which covariates do you need to adjust for to estimate the total causal influence of food? 4.3.1 Paths Interest: Food on weight Paths: Food -&gt; Weight Food -&gt; Groupsize -&gt; Weight Groupsize is a pipe between Area and Weight. There are no backdoors or colliders. 4.3.2 Model foxes$scale_avgfood &lt;- scale(foxes$avgfood) m2 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood, a ~ dnorm(0, 0.05), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) precis(m2) ## mean sd 5.5% 94.5% ## a 0.0000018 0.044 -0.07 0.07 ## bFood -0.0241757 0.091 -0.17 0.12 ## sigma 0.9953723 0.065 0.89 1.10 post &lt;- extract.samples(m2) s &lt;- sim(m2, data = list(scale_avgfood = c(-2, 2)), post = post) ggplot(data.table(s), aes(V1)) + stat_halfeye(.width = .89) 4.3.3 Interpretation Would this make foxes heavier? Which covariates do you need to adjust for to estimate the total causal influence of food? bFood has a mean of -0.02, with compatibility intervals around 0. The model does not indicate a total causal influence of area on the weight. No covariates are needed to estiamte the total causal influence of food because there are no backdoors or colliders. 4.4 Question 3 Now infer the causal impact of group size. Which covariates do you need to adjust for? Looking at the posterior distribution of the resulting model, what do you think explains these data? That is, can you explain the estimates for all three problems? How do they go together? 4.4.1 Paths Interest: Group size on weight Paths: Groupsize -&gt; Weight Groupsize &lt;- Avgfood -&gt; Weight Avgfood is a collider between Groupsize and Weight. There is a backdoor on Groupsize and the path is closed. foxes$scale_groupsize &lt;- scale(foxes$groupsize) m3 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bGroupsize * scale_groupsize + bFood * scale_avgfood, a ~ dnorm(0, 0.05), bGroupsize ~ dnorm(0, 0.5), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) precis(m3) ## mean sd 5.5% 94.5% ## a 0.00000062 0.043 -0.069 0.069 ## bGroupsize -0.57250071 0.180 -0.860 -0.285 ## bFood 0.47624205 0.180 0.189 0.763 ## sigma 0.94590281 0.062 0.846 1.046 DT &lt;- melt(data.table(extract.samples(m3))[, .(bGroupsize, bFood)]) ## Warning in melt.data.table(data.table(extract.samples(m3))[, .(bGroupsize, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars in ## future. ggplot(DT) + geom_density(aes(value, fill = variable), alpha = 0.6) + theme_bw() + scale_fill_viridis_d(begin = 0.3, end = 0.8) 4.4.2 Interpretation Which covariates do you need to adjust for? Looking at the posterior distribution of the resulting model, what do you think explains these data? That is, can you explain the estimates for all three problems? How do they go together? The Avgfood covariate needs to be included since it is a collider between Groupsize and Weight. The mean and compatibility intervals of bFood are positive, while the mean and compatibility intervals of bGroupsize are negative. This indicates food’s positive relationship with weight could be buffered or interacting with the negative relationship of group size. Increased food leads to increased body weight, but more food also results in larger groups, which decreases the food availability. "],["homework-week-4.html", "5 Homework: Week 4 5.1 Question 1 5.2 Question 2 5.3 Question 3", " 5 Homework: Week 4 2021-08-30 [updated: 2021-09-03] 5.0.1 Setup # Packages library(ggdag) library(dagitty) library(data.table) library(ggplot2) library(tidybayes) # Functions dag_plot &lt;- function(dag) { stat &lt;- node_status(dag, FALSE) stat$data$status[is.na(stat$data$status)] &lt;- &#39;intermediate&#39; ggplot(stat, aes(x = x, y = y, xend = xend, yend = yend)) + geom_dag_point(aes(color = status), alpha = 0.5, size = 15) + geom_dag_edges() + labs(color = &#39;&#39;) + geom_dag_text(color = &#39;black&#39;) + scale_color_manual(values = list(&#39;exposure&#39; = &#39;#35608DFF&#39;, &#39;outcome&#39; = &#39;#22A884FF&#39;, &#39;intermediate&#39; = &#39;grey50&#39;)) + theme_void() } 5.1 Question 1 Consider three fictional Polynesian islands. On each there is a Royal Ornithologist charged by the king with surveying the birb population. They have each found the following proportions of 5 important birb species: # Data birds &lt;- matrix( c(0.2, 0.2, 0.2, 0.2, 0.2, 0.8, 0.1, 0.05, 0.025, 0.025, 0.05, 0.15, 0.7, 0.05, 0.05), nrow = 3, ncol = 5, byrow = TRUE ) dimnames(birds) &lt;- list(as.character(1:3), LETTERS[1:5]) birds ## A B C D E ## 1 0.20 0.20 0.20 0.200 0.200 ## 2 0.80 0.10 0.05 0.025 0.025 ## 3 0.05 0.15 0.70 0.050 0.050 First, compute the entropy of each island’s birb distribution. Interpret these entropy values DT &lt;- melt(data.table(birds, keep.rownames = &#39;island&#39;), id.vars = &#39;island&#39;, variable.name = &#39;id&#39;, value.name = &#39;proportion&#39;) # Entropy entropy &lt;- function(p) -sum(p * log(p)) DT[, .(entropy = entropy(proportion)), by = island] ## island entropy ## &lt;char&gt; &lt;num&gt; ## 1: 1 1.61 ## 2: 2 0.74 ## 3: 3 0.98 The information entropy describes the uncertainty in a distribution of probabilities given the average log-probability of an event (from Statistical Rethinking 7.2). Island 1 has the highest entropy, with the flat probability of 0.2 across 5 bird species. Island 2 has the lowest entropy, including species A with the highest overall proportion 0.8. Second, use each island’s birb distribution to predict the other two. This means to compute the K-L Divergence of each island from the others, treating each island as if it were a statistical model of the other islands. You should end up with 6 different K-L Divergence values. Which island predicts the others best? Why? divergence &lt;- function(p, q) sum(p * (log(p) - log(q))) z &lt;- CJ(p = DT$island, q = DT$island, unique = TRUE)[, row_id := .I] z[, div := divergence(DT[island == p, proportion], DT[island == q, proportion]), by = row_id] z[p != q] ## p q row_id div ## &lt;char&gt; &lt;char&gt; &lt;int&gt; &lt;num&gt; ## 1: 1 2 2 0.97 ## 2: 1 3 3 0.64 ## 3: 2 1 4 0.87 ## 4: 2 3 6 2.01 ## 5: 3 1 7 0.63 ## 6: 3 2 8 1.84 divergence(p, q) = “Average difference in log probability between the target (p) and the model (q)”. Model 1 predicts target 3 best (lowest divergence at 0.63) and target 2 best (lowest divergence at 0.87) because it has the highest entropy. Model 3 predicts target 1 best (lowest divergence at 0.64) because it has higher entropy than model 2. 5.2 Question 2 Recall the marriage, age, and happiness collider bias example from Chapter 6. Run models m6.9 and m6.10 again. 5.2.1 DAG dag &lt;- dagify( marriage ~ happiness, marriage ~ age, exposure = &#39;age&#39;, outcome = &#39;happiness&#39; ) dag_plot(dag) 5.2.2 Data library(rethinking) d &lt;- sim_happiness(seed = 1977, N_years = 1e3) d2 &lt;- d[d$age &gt; 17,] d2$A &lt;- (d2$age - 18) / (65 - 18) d2$mid &lt;- d2$married + 1 precis(d2) ## mean sd 5.5% 94.5% histogram ## age 41.5000000000000000 13.86 20.000 63.00 ▃▇▇▇▇▇▇▇▇▇ ## married 0.4072916666666667 0.49 0.000 1.00 ▇▁▁▁▁▁▁▁▁▅ ## happiness -0.0000000000000001 1.21 -1.789 1.79 ▇▅▇▅▅▇▅▇ ## A 0.5000000000000000 0.29 0.043 0.96 ▇▇▇▅▇▇▅▇▇▇ ## mid 1.4072916666666666 0.49 1.000 2.00 ▇▁▁▁▁▁▁▁▁▅ 5.2.3 Models m6.9 &lt;- quap( alist( happiness ~ dnorm(mu, sigma), mu &lt;- a[mid] + bA * A, a[mid] ~ dnorm(0, 1), bA ~ dnorm(0, 2), sigma ~ dexp(1) ), data = d2 ) precis(m6.9, depth = 2) ## mean sd 5.5% 94.5% ## a[1] -0.24 0.063 -0.34 -0.13 ## a[2] 1.26 0.085 1.12 1.39 ## bA -0.75 0.113 -0.93 -0.57 ## sigma 0.99 0.023 0.95 1.03 m6.10 &lt;- quap( alist( happiness ~ dnorm(mu, sigma), mu &lt;- a + bA * A, a ~ dnorm(0, 1), bA ~ dnorm(0, 2), sigma ~ dexp(1) ), data = d2 ) precis(m6.10, depth = 2) ## mean sd 5.5% 94.5% ## a 0.00000016 0.077 -0.12 0.12 ## bA -0.00000027 0.132 -0.21 0.21 ## sigma 1.21318761 0.028 1.17 1.26 5.2.4 Interpretation Compare these two models using WAIC (or LOO, they will produce identical results). Which model is expected to make better predictions? Which model provides the correct causal inference about the influence of age on happiness? Can you explain why the answers to these two questions disagree? compare(m6.9, m6.10) ## WAIC SE dWAIC dSE pWAIC weight ## m6.9 2714 38 0 NA 3.7 1 ## m6.10 3102 28 388 35 2.3 0 Model m6.9 includes marriage while m6.10 does not. The causal influence of age on happiness is confounded by marriage because marriage is a collider between age and happiness. Conditioning on marriage opens the path between age and happiness, making age and happiness independent. Therefore, despite the WAIC for m6.9 being lower, it does not tell us anything about causation between the variables. 5.3 Question 3 Reconsider the urban fox analysis from last week’s homework. Use WAIC or LOO based model comparison on five different models, each using weight as the outcome, and containing these sets of predictor variables: avgfood + groupsize + area avgfood + groupsize groupsize + area avgfood area 5.3.1 Data library(rethinking) data(foxes) 5.3.2 Models foxes$scale_area &lt;- scale(foxes$area) foxes$scale_weight &lt;- scale(foxes$weight) foxes$scale_avgfood &lt;- scale(foxes$avgfood) foxes$scale_groupsize &lt;- scale(foxes$groupsize) m1 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood + bGroup * scale_groupsize + bArea * scale_area, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m2 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood + bGroup * scale_groupsize, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m3 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bGroup * scale_groupsize + bArea * scale_area, a ~ dnorm(0, 0.2), bArea ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m4 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m5 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bArea * scale_area, a ~ dnorm(0, 0.2), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) 5.3.3 DAG dag &lt;- dagify( weight ~ groupsize + avgfood, groupsize ~ avgfood, avgfood ~ area, exposure = &#39;area&#39;, outcome = &#39;weight&#39; ) dag_plot(dag) 5.3.4 Interpretation Can you explain the relative differences in WAIC scores, using the fox DAG from last week’s homework? Be sure to pay attention to the standard error of the score differences (dSE). weight ~ avgfood + groupsize + area weight ~ avgfood + groupsize weight ~ groupsize + area weight ~ avgfood weight ~ area compare_models &lt;- compare(m1, m2, m3, m4, m5) compare_models ## WAIC SE dWAIC dSE pWAIC weight ## m1 323 16 0.00 NA 4.6 0.4568 ## m2 324 16 0.97 3.6 3.7 0.2811 ## m3 324 16 1.15 2.9 3.8 0.2575 ## m4 333 14 10.56 7.1 2.4 0.0023 ## m5 334 14 10.66 7.2 2.6 0.0022 compare_models@dSE ## m1 m2 m3 m4 m5 ## m1 NA 3.6 2.9 7.13 7.19 ## m2 3.6 NA 5.8 6.55 6.79 ## m3 2.9 5.8 NA 6.54 6.59 ## m4 7.1 6.5 6.5 NA 0.84 ## m5 7.2 6.8 6.6 0.84 NA # Filled points: in-sample deviance # Open points: WAIC # Dark lines: standard error of WAIC # Light lines with triangles: standard error of difference in WAIC between each model and top model plot(compare_models) coeftab(m1, m2, m3, m4, m5) ## m1 m2 m3 m4 m5 ## a 0 0 0 0 0 ## bFood 0.30 0.48 NA -0.02 NA ## bGroup -0.64 -0.57 -0.48 NA NA ## bArea 0.28 NA 0.41 NA 0.02 ## sigma 0.93 0.95 0.95 1.00 1.00 ## nobs 116 116 116 116 116 Weight is the outcome in all of the models. Looking at the DAG, we see a potential back door into avgfood and group size, but no colliders. Avgfood is a path between area and weight, as is groupsize between avgfood and weight. The paths for each variable that does not have confounds shown in the DAG: Model 2: Weight ~ groupsize + avgfood (to determine causal effect of groupsize on weight, including avgfood to open the collider) Model 4: Weight ~ avgfood (to determine causal effect of avgfood, without groupsize confusing the relationship since it’s a pipe) Model 5: Weight ~ area (with avgfood and groupsize excluded) Model 1 includes the most parameters and, as expected, has the highest model fit. The dSE column returned by the compare function indicates the standard error of the difference between models, with the @dSE slot showing this for all combinations of models. Models 4 and 5 barely differ, as there is likely a strong influence of area on average food. Including both area and avgfood is like conditioning on the intermediate treatment effect. Models 4 and 5 are most different from models 1, 2, 3. Models 1, 2, and 3 all have groupsize and the WAIC and coeftab, as well as the DAG, indicate the models have the same inference. "],["lecture-01.html", "6 Lecture 01 6.1 Hypotheses - Process Models - Statistical Models 6.2 Small world / large world 6.3 Example: four marbles 6.4 Building a model", " 6 Lecture 01 6.0.1 Popper generate meaningful (not null) hypotheses and predictions and falsify those 6.0.2 Approach A framework for developing + using statistical golems Bayesian data analysis uses probability to describe uncertainty “count all the ways data can happen, according to assumptions and the assumptions with more ways consistent with the data are more plausible” Multilevel models Models within models Avoids averaging … Model comparison Compare meaningful (not null) models Caution: overfitting 6.1 Hypotheses - Process Models - Statistical Models Any statistical model M can correspond to multiple process models Any hypothesis H may correspond to multiple process models Any statistical model may correspond to multiple hypothesis Untitled 6.2 Small world / large world Small world: models have assumptions, bayesian models fit optimally Large world: real world, no guarantee of optimality 6.3 Example: four marbles Setup 4 marbles, either black or white, with replacement Possibilities (5) therefore: WWWW, BWWW, BBWW, BBBW, BBBB Observation: BWB Calculate Given 3 observations, there are 4 choices, for a total of 64 possibilities Given we observed both a white and a black marble, possibilities WWWW and BBBB are not valid At each branch, there are 3 possibilities it can be white and 1 possibility it can be black Bayesian is additive, at each branch just sum the possibility BWWW: 3 = 1 * 3 * 1 BBWW: 8 = 2 * 2 * 2 BBBW: 9 = 3 * 1 * 3 Using new information New information is directly integrated into the old information, therefore just multiply it through So if we take another measure of B, multiply the property through BWWW: 3 * 1 = 3 BBWW: 8 * 2 = 16 BBBW: 9 * 3 = 27 Using other information Factory says B measures are rare, but minimum of 1 per bag Factory info WWWW 0 since we observed a B BWWW: 3 BBWW: 2 BBBW: 1 BBBB 0 since we observed a W Multiply it through BWWW: 3 * 3 = 9 BBWW: 16 * 2 = 32 BBBW: 1 * 27 = 27 Counts get huge - therefore we normalize them giving us probabilities (0-1) Probability theory is just normalized counting 6.4 Building a model Design the model Condition on the data Evaluate, critique the model (Restart) "],["lecture-02.html", "7 Lecture 02 7.1 Joint prior distribution 7.2 Example: inflatable world 7.3 Grid approximation", " 7 Lecture 02 7.1 Joint prior distribution The joint prior distribution is the prior probability of distribution + parameters 7.2 Example: inflatable world 7.2.1 Design the model p: water proportion 1-p: land proportion 7.2.2 Condition Bayes updating: converts priors to posteriors Adds all data at once All posteriors are the prior for next observation Sample size is embodied in the posterior 7.2.3 Evaluate Golem must be supervised Did it malfunction? Does the answer make sense? … 7.2.4 Define parameters N: fixed by experimentor W: a probability distribution, in this case a binomial distribution WLWWLWWLW dbinom(6, size = 9, prob = 0.5) p: prior probability distribution, in this case uniformed 7.2.5 Joint model W ~ Binomial(N, p) p ~ Uniform(0, 1) (W is distributed binomially with probability p on each measure, p is uniform at 1) 7.2.6 Posterior Posterior = (probability observed variables * prior) / normalizing constant (If priors are uniform, they don’t affect the shape of the posterior. They may influence the shape though) 7.3 Grid approximation Grid approximation: consider only a finite discrete set of solutions For example, 1000 solutions Generate a sequence of solutions seq_sol &lt;- seq(0, 1, length.out = 1000) Prior = uniform 1 across sequence of solutions prior &lt;- rep(1, seq_sol) Probability of data = binomial prob_data &lt;- dbinom(6, size = 9, prob = seq_sol) Posterior numerator = posterior_num &lt;- prior * prob_data Posterior standardized = posterior_numerator / sum(posterior_num) 7.3.1 Sampling from the posterior Approximate the posterior, then you can sample from the posteriors sample(p, prob = posterior, 1e4, replace = TRUE) Summarize above/below some value Percentile interval Highest posterior density interval … Predictive checks rbinorm(1e4, size = 0, prob = samples) … "],["lecture-03.html", "8 Lecture 03 8.1 Regressions 8.2 Normal distributions 8.3 Prior predictive distributions 8.4 Quadratic approximate 8.5 Centering variables", " 8 Lecture 03 8.1 Regressions Model of mean and variance of some normally distributed measure Mean as additive combination of weighted vairables Typical assumed constant variable (???) The line returned is the mean - but with bayesian we want to see the distribution of lines, ranked by plausability The model endorses the line, but the line doesn’t necessarily fit the data In regressions there will always be more certainty at the means and bowtie towards the limits of the data Regression models don’t have arrows like DAGs - they just measure associations. 8.2 Normal distributions Normal distributions arise when repeated fluctuations tend to cancel near 0 The gaussian distribution is the most conservative distribution to use for a prior, it is the best option if no additional scientific information is available 8.3 Prior predictive distributions Simulate from the joint posterior distribution and evaluate Setup model with quap prior &lt;- extract.prior(model) link(model, post = prior, data = seq) where the seq is a sequence of your x variable (eg for standardize -2, 2 Plot lines These are all the possibility give the prior, not the data If the lines show such a limited relationship that you’d expect that the true relationship is outside of these, expand the priors. If alternatively they are widely implausible, tighten the priors. 8.4 Quadratic approximate In a multidimensional space, QUAP uses gradient climbing to find peaks Maximum likelihood estimation = QUAP with flat priors Function in rethinking is rethinking::quap 8.5 Centering variables x - mean(x) Should be default behaviour when doing a regression "],["lecture-04.html", "9 Lecture 04 9.1 Standardizing variables 9.2 Plotting uncertainty - sample from posterior 9.3 Polynomials 9.4 Splines 9.5 Basis splines", " 9 Lecture 04 9.1 Standardizing variables (x - mean(x)) / sd(x) or scale(x) Result = mean of 0, sd of 1 Helps software fit Value = 1 is equal to 1 SD 9.2 Plotting uncertainty - sample from posterior (if multivariate normal) Approximate posterior from mean, standard deviation Sample from multivariate normal distribution of parameters Use sampels to generate predictions that integrate over uncertainty extract_samples returns a, b, sigma, … and you can plot each 9.3 Polynomials Polynomials have bad behaviour especially at the boundaries of the data They don’t fit locally, and are not actually flexibly. Eg. a polynomial of 3rd degree will necessarily have two turns - this has to happen irrespective of the data 9.4 Splines Locally wiggly functions, combined by interpolation Geocentric - describing relationships - not exploring them 9.5 Basis splines Bayesian B-splines = P-splines Similar to linear models but with synthetic variables \\(\\mu = \\alpha + w_{1} \\beta_{1} + + w_{2} \\beta_{2} + + w_{3} \\beta_{3} + + w_{4} \\beta_{4} + ...\\) Knots are often picked at equal intervals in data, though strategies vary At each knot, the knot’s function is at 100%, moving away from it, the neighboring functions turn on Parameters always have more uncertainty than predictions Caution: overfitting 9.5.1 Recipe Choose knots - points where spline pivots Choose degree of basis functions - how wiggly, polynomial Find posterior distribution of weights "],["lecture-05.html", "10 Lecture 05 10.1 Multiple regression models 10.2 Directed acyclic graphs (DAG) 10.3 Example: Age, marriage, divorce 10.4 Plotting multivariate posteriors 10.5 Reveal masked associations 10.6 Categorical variables", " 10 Lecture 05 10.1 Multiple regression models Why? Spurious associations Determining the value of some predictor given other predictors eg. divorce rate given marriage rate and median age at marriage. Once we know marriage rate, what is the value in knowing median age? 10.2 Directed acyclic graphs (DAG) Directed: arrows, indicating causal implications Acyclic: no loops Unlike statistical models, DAGs have causal implications eg. Median age → marriage rate → divorce rate, Median age → divorce rate 10.3 Example: Age, marriage, divorce \\(D_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta_{M}M_{i} + \\beta_{A}A_{i}\\) (M)arriage rate (A)ge at marriage (D)ivorce rate 10.3.1 Priors Standardize to z-scores \\(\\alpha\\) = expected value for response when all values are 0. since they are all standardized the response should be 0. Without peaking at the data, this could be hard to guess. But after standardization, it is much simpler. Slopes - use prior predictive simulation. Harder. 10.3.2 Prior predictive simulation See Prior predictive distributions 10.3.3 Interpretation Once we know median age at marriage, there is little additional value in knowing marriage rate. Once we know marriage rate, there is still value in knowing median age at marriage. If we don’t know median, it is still useful to know marriage rate, since median age at marriage is related to marriage rate. However, we don’t want to try and influence eg. policy on marriage rate, since it isn’t causal on divorce rate. 10.4 Plotting multivariate posteriors Regress predictor on other predictors Compute predictor residuals Regress outcome on residuals Side note: never analyze the residuals. 10.4.1 Posterior predictive checks Compute implied predictions for observed cases Again, regressions will always do well in the area around the mean 10.5 Reveal masked associations Sometimes association between outcome and predictor is masked by another variable This tends to arise when 2 predictors associated with the outcome have opposite effects on it 10.6 Categorical variables Two approaches: Use dummy/indicator variables Use index variables Index variables are much better 10.6.1 Dummy variable “Stand in” variable Eg. male/female column, translated to 0, 1, 0, 0, 1 where 0 female, 1 male Model: \\(h_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta_{M}M_{i}\\) In the case of dummy variables, alpha is the mean when M = 0 (female) and beta M is the change in mean when M = 1 (male). Result is 2 intercepts = where alpha alone is for female and alpha + beta M is intercept for males Problem: for k categories, need k-1 dummy variables and need priors for each. also, priors aren’t balanced because of alpha vs beta "],["lecture-06.html", "11 Lecture 06 11.1 Index variable 11.2 Four elemental confounds", " 11 Lecture 06 11.1 Index variable (For unordered, categorical variables) Starts at 1, counts up Same prior can be given to all Extends easily &gt; 2 eg. m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a[sex], a[sex] ~ dnorm(178, 20), sigma ~ dunif(0, 50) ), data = d ) a[sex] and a for each sex and prior for each. directly in precis(m) too. Then you can directly calculate the difference between groups in the posteriors, no need to rerun the model post &lt;- extract.samples(m) post$diff &lt;- post$a[, 1] - post$a[, 2] precis(post) # mean # sigma 27 # a[1] 134 # a[2] 142 # diff -7.7 11.2 Four elemental confounds When inferring the relationships between X and Y… Confounds are not determined by model selection, so we use DAGs. Arrows indicate causation, and statistical information can flow either way. 11.2.1 Notes Regression models don’t have arrows like DAGs - they just measure associations. You can’t tell the difference between the fork and the path given the data alone. Remember DAGs are small world constructs. 11.2.2 The fork X ← Z → Y Z is a common cause of X and Y. Including Z will remove the relationship between X and Y. 11.2.3 The path X → Z → Y Z is along the path of X and Y, mediating the relationship. For example, the influence of treatment on plant height, where treatment has an influence on fungus. T → F → H Since the treatment influences the fungus (a post treatment measure), if we include both the treatment and the fungus, we will see no relationship of treatment on height, only fungus. (once we know fungus, what does treatment tell us - nothing). In this case, the model with both treatment and fungus tells us the relationship between them, but to properly consider the influence of treatment we need to omit fungus Therefore, understanding the relationship between T and F is important, but for determining causality of T on H, we need to omit it from that model. 11.2.4 The collider X → Z ← Y Z is common result of X and Y. X and Y are independent, if you condition on Z. Careful about statistical correlations that do not indicate causation here. 11.2.5 Steps List all paths connecting X (treatment) and Y (outcome) Classify each path as either open or closed. All paths are open unless they contain a collider. Classify each path as backdoor/frontdoor. Backdoor paths have an arrow entering X. Condition on variables in backdoor paths to close them. Untitled "],["lecture-07.html", "12 Lecture 07 12.1 Four elemental confounds (continued) 12.2 Over fitting 12.3 Measuring model fit 12.4 Obtaining the regular features", " 12 Lecture 07 12.1 Four elemental confounds (continued) 12.1.1 Unobserved variables Careful about unmeasured variables. They can create confounds, without being directly measured. Eg. (Haunted DAG). G on C. G → P → C, G → C. But unobserved variable U creates a collider: G → P ← U → C. So including P allows the collider to distort the influence on G on C. 12.2 Over fitting Ockham’s razor: “plurality should never be posited without necessity” This isn’t sufficient, because we are usually comparing between models that are more complicated but fit the data better, and models that are less complicated but fit worse. Two major hazards: too simple, not learning enough from data (under fitting) and too complex, learning too much from data (over fitting) Goal = to learn from regular features from the sample, those that will generalize to other samples 12.3 Measuring model fit 12.3.1 R squared Common, not great \\(R_{2} = 1 - \\frac{var(residuals)}{var(outcome)}\\) “Proportion of variance explained” You can get R squared = 1 with a parameter for each data point - perfect fit. This is obviously nonsense. Therefore there’s a trap of picking models solely on their R squared because increase the parameters and you will increase the R squared. 12.4 Obtaining the regular features Regularizing priors Cross validation Information criteria "],["lecture-08.html", "13 Lecture 08 13.1 Information theory 13.2 Divergence 13.3 Estimating divergence 13.4 Regularization 13.5 Cross validation 13.6 Information criteria 13.7 Model selection 13.8 Model comparison", " 13 Lecture 08 13.1 Information theory Information: reduction in uncertainty caused by learning an outcome Therefore it’s a scale of uncertainty, and information theory is a system for deriving a metric of uncertainty Information entropy: uncertainty in a probability distribution is average the log probability of an event. Uncertainty in a distribution, “potential for surprise” entropy(p) - entropy(q) is what we are trying to minimize (where p is true, q is model) 13.2 Divergence \\(D_{KL} = \\sum p_{i} (log(p_{i}) - log(q_{i}))\\) Average difference in log probability between the model q and target p It’s asymmetrical - recall W/L ratio on Earth → Mars and reverse. Expecting few water events coming from Mars and the reverse coming from Earth Since we don’t actually know the “truth”, we can’t use this to directly measure a model But turns out - we don’t need the truth to compare two models, only their average log probability 13.3 Estimating divergence This is the gold standard for scoring models 13.3.1 Log pointwise predictive density lppd Pointwise measure of average probability that the model expects the data Using the entire posterior, measures the log probability Summing the vector of lppd returns the total log probability score Larger values are better, indicating larger average accuracy 13.3.2 Deviance Deviance = lppd score * -2 Smaller values are better Note: deviance decreases with more parameters, however out of sample deviance is best in the model with the right number of parameters (simulated example) 13.4 Regularization Must always be skeptical of the sample Regularization: use informative, conservative priors to reduce overfitting (models learn less from sample). This is particularly important for small sample sizes and as a result, for multilevel models. 13.5 Cross validation Without known out of sample measures, you can estimate out of sample deviance Model with some samples left out, and average over the estimate of those samples 13.5.1 LOO Leave one out Pareto-smoothed importance sample (PSIS) loo package 13.6 Information criteria Historically: AIC, a theoretical estimate of the KL distance Assumptions of AIC include priors are flat or overwhelmed by data posterior is essentially gaussian sample size &gt;&gt; number of parameters k 13.6.1 WAIC Widely Applicable Information Criterion Does not assume gaussian posterior 13.6.2 Standard error Presented in rethinking::compare and available for LOO or AIC comparisons. The standard error is the approximate standard error of each WAIC. Caution: with small sample sizes, the standard error reported underestimates the uncertainty. To determine if two models can be distinguished, use the standard error of their difference (dSE). Using the compare function, you can get the @dSE slot to return a matrix of dSE for each pair of models. 13.7 Model selection Avoid model selection Score models and apply causal inference to use compare competing models to explain 13.8 Model comparison Model comparison is not causal inference Add and imagine unobserved confounds 13.8.1 Example 1: model mis-selection using WAIC Height 0 → Height 1, Treatment → Fungus → Height 1 F + T, dWAIC = 0 T, dWAIC = 41 intercept = 44 Since f is a pipe on T→F, including it confounds the model AIC does not indicate causal inference, it simply identifies the best model according to the predicted out of sample deviance Model comparison AND causal inference are important 13.8.2 Example 2: primate lifetime Body mass → lifespan, Body mass → brain size → lifespan Relationship of interest: brain size on lifespan M + B, WAIC = 217 B, WAIC = 218 M = 229 Note: when we have different parameters that return similar WAIC, it’s an invitation to poke inside! Inspecting their estimate posterior we notice that the sign of the brain mass parameter flips from negative to positive across models Another approach: since WAIC is pointwise we can plot the difference in WAIC for each point across models Comparing life span on Y, and pointwise difference in WAIC between the two models on X We see that the model M+B is better for some species eg. Cebus, and the simple B model is better for other species eg. Gorilla Incredible "],["lecture-09.html", "14 Lecture 09 14.1 Conditioning 14.2 Interpreting interactions 14.3 Plotting interactions", " 14 Lecture 09 14.1 Conditioning Interaction of variables on each other Dependence on the state eg. Influence of genes on phenotype depends on environement Approaches Use interacting terms (simplest) Generalized linear models Multilevel models Interactions arise wherever there is a boundary in the outcome space. All GLMs have interactions. In a DAG, an interaction looks like gene → phenotype ← environment But DAGs can’t fully tell you if it’s an interaction Before interaction terms, all variables are simply independent additive terms. 14.1.1 Example: ruggedness “Ruggedness is bad for the economy outside of Africa, but within Africa is it good” Reminder - constrain priors to possible outcome space Scale ruggedness between 0, 1 Constrain change in GDP bc evidently eg GDP x 2 would be a huge effect Keep it reasonable Options Split the data? Run two linear regressions. This means there is no statistical criteria to measure the split. We are interested in the contrast in slope, but to do that we need to use the same model. Add a categorical variable for Africa? Use alpha[id] and different estimates for each This means the slope is forced to be the same, but difference intercepts. Relationship is held constant across groups, not what we want. Interaction \\(\\mu_{i} = \\alpha_{CID[i]} + \\beta_{CID[i]}(r_{i} - \\bar{r})\\) Slope and intercept are allowed to vary for each 14.1.2 Example: tulips Tulip blooms, in varying Water and Shade \\(\\mu_{i} = \\alpha + \\beta_{W}W + \\beta_{S}S + \\beta_{W * S}W*S\\) The beta W*S variable is actually a nested linear model 14.2 Interpreting interactions Interpreting interactions is hard The influence of predictors depends upon multiple parameters and their covariation Interactions are symmetric within the data. Eg. effect of continent depends on ruggedness is the same as effect of ruggedness on continent Statistically the same We need to apply our outside knowledge and causal information 14.3 Plotting interactions Use a triptych Vary shade at -1, 0, 1 Plot bloom as response and water on x 14.3.1 Higher order interactions Caution: hard to interpret, hard to estimate "],["lecture-10.html", "15 Lecture 10 15.1 Markov Chain Monte Carlo", " 15 Lecture 10 15.1 Markov Chain Monte Carlo Reminder: bayesian inference is about calculating the posterior. Bayesian ≠ Markov Chains 4 of the ways to compute the posterior Analytical approach (mostly impossible) Grid approximation (very intensive) Quadratic approximate (limited) MCMC (intensive) Advantages of MCMC You don’t know the posterior yet you can still visit each part of it in proportion to it’s relative probability “Sample from a distribution that we don’t know” 15.1.1 Metropolis algorithm Loop over iterations Record location Generate neighbour location proposals Move based on frequency Converges in the long run, can be used as long as proposals are symmetric 15.1.2 Metropolis Hastings Improvement on Metropolis, does not require the proposals to be symmetrical 15.1.3 Gibbs sampling More efficient version of MH 15.1.4 Hamiltonian Monte Carlo Markov Chain: No memory. Probability solely depends on current state, not past state. No storage. Monte Carlo: Random simulation (eg Monaco casino) MCMC is a numerical technique to solve for the posterior, with several advantages over Metropolis and Gibbs Metropolis and Gibbs use optimization but optimization is not a good strategy in high dimensions (see concentration of measure) Hamiltonian Monte Carlo uses a gradient to avoid the guess + check of Metropolis and Gibbs Especially in high dimensional space, acceptance rate decreases and methods take more time Hamiltonian Monte Carlo: Uses a physics simulation representing the parameter state as a particle Flicks the particle around a frictionless log-posterior surface Follows curvature of the surface, so it doesn’t get stuck Uses random direction and random speed Slows as it climbs, speeds as it drops This is much more computationally intensive, but requires less steps, has much fewer rejections It’s also easier to determine if MCMC has failed 15.1.5 Tuning MCMC Step size: time the simulation is run. Increase step size = increase efficiency but overestimates curvature U Turn risk is solved by NUTS (No U Turn Sampler) Warm up phase - finding the step size to maximize acceptance rate. Default = good (half the number of samples) Runs in both directions and gives uncorrelated samples. No need to pick leap frog steps 15.1.6 Stan Stan uses NUTS 15.1.7 ulam Create list of data only what you need ulam with formulas as in quap ulam translates the formulas to Stan Builds the NUTS sampler Sampler runs Returns posterior 15.1.8 Diagnosis Neff: number of effective samples. Can be greater than the number of samples from the Markov Chan. Effective if no autocorrelation Rhat: Convergence diagnostic. 1 is good. Ratio of variance within vs ratio of variance across chains. \"Typically when you have a computational problem, often there’s a problem with your model\" 15.1.9 Checking the chain TODO: p283 "],["lecture-11.html", "16 Lecture 11", " 16 Lecture 11 Flat distributions have the highest entropy and have many more ways that they can be realized "],["lecture-12.html", "17 Lecture 12", " 17 Lecture 12 library(rethinking) data(chimpanzees) d &lt;- chimpanzees d$treatment &lt;- 1 + d$prosoc_left + 2 * d$condition xtabs( ~ treatment + prosoc_left + condition, d) ## , , condition = 0 ## ## prosoc_left ## treatment 0 1 ## 1 126 0 ## 2 0 126 ## 3 0 0 ## 4 0 0 ## ## , , condition = 1 ## ## prosoc_left ## treatment 0 1 ## 1 0 0 ## 2 0 0 ## 3 126 0 ## 4 0 126 dat_list &lt;- list( pulled_left = d$pulled_left, actor = d$actor, treatment = as.integer(d$treatment) ) m11.4 &lt;- ulam( alist( pulled_left ~ dbinom(1, p), logit(p) &lt;- a[actor] + b[treatment], a[actor] ~ dnorm(0, 1.5), b[treatment] ~ dnorm(0, 0.5) ), data = dat_list, chains = 4#, # log_lik = TRUE ) ## ## SAMPLING FOR MODEL &#39;e93b3fae6cdfbece233b5e9fca1623b1&#39; NOW (CHAIN 1). ## Chain 1: ## Chain 1: Gradient evaluation took 9.2e-05 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.92 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1: ## Chain 1: ## Chain 1: Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 1: Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 1: Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 1: Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 1: Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 1: Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 1: Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 1: Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 1: Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 1: Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 1: Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 1: Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 1: ## Chain 1: Elapsed Time: 0.397079 seconds (Warm-up) ## Chain 1: 0.443733 seconds (Sampling) ## Chain 1: 0.840812 seconds (Total) ## Chain 1: ## ## SAMPLING FOR MODEL &#39;e93b3fae6cdfbece233b5e9fca1623b1&#39; NOW (CHAIN 2). ## Chain 2: ## Chain 2: Gradient evaluation took 6.4e-05 seconds ## Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.64 seconds. ## Chain 2: Adjust your expectations accordingly! ## Chain 2: ## Chain 2: ## Chain 2: Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 2: Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 2: Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 2: Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 2: Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 2: Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 2: Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 2: Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 2: Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 2: Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 2: Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 2: Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 2: ## Chain 2: Elapsed Time: 0.357693 seconds (Warm-up) ## Chain 2: 0.330852 seconds (Sampling) ## Chain 2: 0.688545 seconds (Total) ## Chain 2: ## ## SAMPLING FOR MODEL &#39;e93b3fae6cdfbece233b5e9fca1623b1&#39; NOW (CHAIN 3). ## Chain 3: ## Chain 3: Gradient evaluation took 6.2e-05 seconds ## Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.62 seconds. ## Chain 3: Adjust your expectations accordingly! ## Chain 3: ## Chain 3: ## Chain 3: Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 3: Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 3: Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 3: Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 3: Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 3: Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 3: Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 3: Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 3: Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 3: Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 3: Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 3: Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 3: ## Chain 3: Elapsed Time: 0.414806 seconds (Warm-up) ## Chain 3: 0.366973 seconds (Sampling) ## Chain 3: 0.781779 seconds (Total) ## Chain 3: ## ## SAMPLING FOR MODEL &#39;e93b3fae6cdfbece233b5e9fca1623b1&#39; NOW (CHAIN 4). ## Chain 4: ## Chain 4: Gradient evaluation took 6.9e-05 seconds ## Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.69 seconds. ## Chain 4: Adjust your expectations accordingly! ## Chain 4: ## Chain 4: ## Chain 4: Iteration: 1 / 1000 [ 0%] (Warmup) ## Chain 4: Iteration: 100 / 1000 [ 10%] (Warmup) ## Chain 4: Iteration: 200 / 1000 [ 20%] (Warmup) ## Chain 4: Iteration: 300 / 1000 [ 30%] (Warmup) ## Chain 4: Iteration: 400 / 1000 [ 40%] (Warmup) ## Chain 4: Iteration: 500 / 1000 [ 50%] (Warmup) ## Chain 4: Iteration: 501 / 1000 [ 50%] (Sampling) ## Chain 4: Iteration: 600 / 1000 [ 60%] (Sampling) ## Chain 4: Iteration: 700 / 1000 [ 70%] (Sampling) ## Chain 4: Iteration: 800 / 1000 [ 80%] (Sampling) ## Chain 4: Iteration: 900 / 1000 [ 90%] (Sampling) ## Chain 4: Iteration: 1000 / 1000 [100%] (Sampling) ## Chain 4: ## Chain 4: Elapsed Time: 0.412287 seconds (Warm-up) ## Chain 4: 0.331079 seconds (Sampling) ## Chain 4: 0.743366 seconds (Total) ## Chain 4: writeLines(m11.4@model) ## data{ ## int pulled_left[504]; ## int treatment[504]; ## int actor[504]; ## } ## parameters{ ## vector[7] a; ## vector[4] b; ## } ## model{ ## vector[504] p; ## b ~ normal( 0 , 0.5 ); ## a ~ normal( 0 , 1.5 ); ## for ( i in 1:504 ) { ## p[i] = a[actor[i]] + b[treatment[i]]; ## p[i] = inv_logit(p[i]); ## } ## pulled_left ~ binomial( 1 , p ); ## } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
