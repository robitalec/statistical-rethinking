[["index.html", "Learning bayesian data analysis with Statistical Rethinking 1 Overview 1.1 Approach 1.2 Links 1.3 Seed", " Learning bayesian data analysis with Statistical Rethinking Alec L. Robitaille 2021-08-18 [updated: 2021-10-07] 1 Overview 1.1 Approach For Chapters 1-4, I use quap from the rethinking package, following along with the book and solutions. For Chapters 5-10, I use cmdstanr and stantargets to benefit from the incredible targets package. All wrapped up with bookdown. Thanks to Richard McElreath for the book and providing lectures available online. And thanks to all the package and Stan developers. See the full references for all packages. 1.2 Links Course: https://github.com/rmcelreath/statrethinking_winter2019 targets: https://books.ropensci.org/targets/ cmdstanr: https://mc-stan.org/cmdstanr/ stantargets: https://docs.ropensci.org/stantargets/ bookdown: https://bookdown.org/home/ 1.2.1 Adaptations Stan+R: https://vincentarelbundock.github.io/rethinking2/ tidy+rethinking: https://david-salazar.github.io/2020/04/19/statistical-rethinking-week-1/ brms+tidy: https://bookdown.org/content/4857/ Julia+Turing: https://github.com/StatisticalRethinkingJulia/TuringModels.jl 1.2.2 Etc https://chi-feng.github.io/mcmc-demo 1.3 Seed set.seed(42) knitr::opts_knit$set(root.dir = find_root(has_file(&#39;_targets.R&#39;))) "],["homework-week-1.html", "2 Homework: Week 1 2.1 Variables 2.2 Joint model 2.3 Question 1 2.4 Question 2 2.5 Question 3", " 2 Homework: Week 1 2021-08-18 [updated: 2021-10-07] 2.1 Variables N: fixed by experimenter p: Prior probability W: A probability distribution given the data. 2.2 Joint model W ~ Binomial(N , p) p ~ Uniform(0, 1) W is distributed binomially with N observations and probability p on each p is distributed uniformally at 1 2.3 Question 1 Suppose the globe tossing data (Chapter 2) had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as in the book. # Size of grid for grid approximation gridsize &lt;- 1000 # Prior grid prior_grid &lt;- seq(0, 1, length.out = gridsize) # Prior probability (all 1) prior_prob &lt;- rep(1, gridsize) # Data probability # given 4/15, using binomial distribution data_prob &lt;- dbinom(8, 15, prob = prior_grid) # Calculate the posterior numerator by multiplying prior and data probability posterior_num &lt;- prior_prob * data_prob # Standardize by sum of posterior numerator posterior &lt;- posterior_num / sum(posterior_num) # Save for later posterior_1 &lt;- posterior plot(posterior, type = &#39;l&#39;) # Sample from posterior samples &lt;- sample(prior_grid, size = gridsize, prob = posterior, replace = TRUE) mean(samples) ## [1] 0.54 PI(samples, .99) ## 1% 100% ## 0.27 0.80 2.4 Question 2 Start over in 1, but now use a prior that is zero below p = 0.5 and a constant above p = 0.5. This corresponds to prior information that a majority of the Earth’s surface is water. What difference does the better prior make? # Size of grid for grid approximation gridsize &lt;- 1000 # Prior grid prior_grid &lt;- seq(0, 1, length.out = gridsize) # Prior probability (all 1 above 0.5, all 0 below) prior_prob &lt;- c(rep(0, gridsize / 2), rep(1, gridsize / 2)) # Data probability # given 4/15, using binomial distribution data_prob &lt;- dbinom(4, 15, prob = prior_grid) # Calculate the posterior numerator by multiplying prior and data probability posterior_num &lt;- prior_prob * data_prob # Standardize by sum of posterior numerator posterior &lt;- posterior_num / sum(posterior_num) # Save for later posterior_2 &lt;- posterior plot(posterior, type = &#39;l&#39;) # Sample from posterior samples &lt;- sample(prior_grid, size = gridsize, prob = posterior, replace = TRUE) mean(samples) ## [1] 0.55 PI(samples, .99) ## 1% 100% ## 0.50 0.72 Narrower curve, higher max, all zeroes before 0.5 2.5 Question 3 For the posterior distribution from 2, compute 89% percentile and HPDI intervals. Compare the widths of these intervals. Which is wider? Why? If you had only the information in the interval, what might you misunderstand about the shape of the posterior distribution? # Calculate Percentile Interval at 89% percent_interval &lt;- PI(posterior, prob = 0.89) percent_interval ## 5% 94% ## 0.0000 0.0073 # Calculate Highest Posterior Density at 89% highest_post_dens &lt;- HPDI(posterior, prob = 0.89) highest_post_dens ## |0.89 0.89| ## 0.0000 0.0025 "],["homework-week-2.html", "3 Homework: Week 2 3.1 Question 1 3.2 Question 2 3.3 Question 3", " 3 Homework: Week 2 2021-08-24 [updated: 2021-10-07] 3.1 Question 1 The weights listed below were recorded in the !Kung census, but heights were not recorded for these individuals. Provide predicted heights and 89% compatibility intervals for each of these individuals. That is, fill in the table below, using model-based predictions. Individual, weight, expected height, 89% interval 1, 45,,, 2, 40,,, 3, 65,,, 4, 31,,, 5, 53,,, Model: \\(h_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta(x_{i} - \\bar{x})\\) \\(\\alpha \\sim \\text{Normal}(178, 20)\\) \\(\\beta \\sim \\text{Log-Normal}(0, 1)\\) \\(\\sigma \\sim \\text{Uniform}(0, 50)\\) theme_set(theme_bw()) data(Howell1) d &lt;- Howell1[Howell1$age &gt;= 18,] m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (weight - mean(weight)), a ~ dnorm(178, 20), b ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) precis(m) ## mean sd 5.5% 94.5% ## a 154.6 0.270 154.17 155.03 ## b 0.9 0.042 0.84 0.97 ## sigma 5.1 0.191 4.77 5.38 Simulate: # Set weights to simulate for weights &lt;- data.table(weight = c(45, 40, 65, 31, 54), id = as.character(seq(1, 5))) simmed &lt;- sim(m, list(weight = weights$weight), n = 1e3) # Tidy DT &lt;- melt(as.data.table(simmed), measure.vars = paste0(&#39;V&#39;, 1:5), value.name = &#39;height&#39;, variable.name = &#39;id&#39;) DT[, id := gsub(&#39;V&#39;, &#39;&#39;, id)] DT[weights, weight := weight, on = &#39;id&#39;] # Plot ggplot(DT, aes(height)) + stat_halfeye(.width = .89) + facet_wrap(~id) 3.2 Question 2 Model the relationship between height (cm) and the natural logarithm of weight (log-kg): log(weight). Use the entire Howell1 data frame, all 544 rows, adults and non-adults. Use any model type from Chapter 4 that you think useful: an ordinary linear regression, a polynomial or a spline. Plot the posterior predictions against the raw data theme_set(theme_bw()) data(Howell1) d &lt;- Howell1 d$logweight &lt;- log(d$weight) m1 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (logweight - mean(logweight)), a ~ dnorm(178, 20), b ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) sim_x &lt;- log(1:60) simmed &lt;- sim(m1, list(logweight = sim_x)) # Tidy DT &lt;- melt(as.data.table(simmed), value.name = &#39;height&#39;, variable.name = &#39;x&#39;) ## Warning in melt.data.table(as.data.table(simmed), value.name = &quot;height&quot;, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars ## in future. DT[data.table(sim_x, x = paste0(&#39;V&#39;, 1:60)), logweight := sim_x, on = &#39;x&#39;] DT[, meanheight := mean(height), by = logweight] DT[, low := PI(height)[1], by = logweight] DT[, high := PI(height)[2], by = logweight] # Plot ggplot(DT) + geom_ribbon(aes(x = exp(logweight), ymin = low, ymax = high), fill = &#39;grey&#39;) + geom_point(aes(exp(logweight), height), data = d, color = &#39;lightblue&#39;, alpha = 0.8) + geom_line(aes(exp(logweight), meanheight)) Using the dlnorm, prior of a Log normal distribution on beta m2 &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a + b * (logweight - mean(logweight)), a ~ dnorm(178, 20), b ~ dlnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) sim_x &lt;- log(1:60) simmed &lt;- sim(m2, list(logweight = sim_x)) # Tidy DT &lt;- melt(as.data.table(simmed), value.name = &#39;height&#39;, variable.name = &#39;x&#39;) ## Warning in melt.data.table(as.data.table(simmed), value.name = &quot;height&quot;, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars ## in future. DT[data.table(sim_x, x = paste0(&#39;V&#39;, 1:60)), logweight := sim_x, on = &#39;x&#39;] DT[, meanheight := mean(height), by = logweight] DT[, low := PI(height)[1], by = logweight] DT[, high := PI(height)[2], by = logweight] # Plot ggplot(DT) + geom_ribbon(aes(x = exp(logweight), ymin = low, ymax = high), fill = &#39;grey&#39;) + geom_point(aes(exp(logweight), height), data = d, color = &#39;lightblue&#39;, alpha = 0.8) + geom_line(aes(exp(logweight), meanheight)) 3.3 Question 3 Set up: theme_set(theme_bw()) data(Howell1) d &lt;- Howell1 d$weight_s &lt;- scale(d$weight) d$weight_s2 &lt;- scale(d$weight) ^ 2 m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu ~ a + b1 * weight_s + b2 * weight_s2, a ~ dnorm(178, 20), b1 ~ dlnorm(0, 1), b2 ~ dnorm(0, 1), sigma ~ dunif(0, 50) ), data = d ) n &lt;- 20 sim_x &lt;- seq(min(d$weight_s), max(d$weight_s), length.out = n) linked &lt;- link( m, data = list(weight_s = sim_x, weight_s2 = sim_x ^ 2), post = extract.prior(m) )[1:50,] plot(NULL, xlim = range(sim_x), ylim = range(linked) + c(-10, 10)) apply(linked, 1, FUN = function(x) lines(sim_x, x)) ## NULL m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu ~ a + b1 * weight_s + b2 * weight_s2, a ~ dnorm(178, 20), b1 ~ dlnorm(0, 1), b2 ~ dnorm(0, 10), sigma ~ dunif(0, 50) ), data = d ) n &lt;- 20 sim_x &lt;- seq(min(d$weight_s), max(d$weight_s), length.out = n) linked &lt;- link( m, data = list(weight_s = sim_x, weight_s2 = sim_x ^ 2), post = extract.prior(m) )[1:50,] plot(NULL, xlim = range(sim_x), ylim = range(linked) + c(-10, 10)) apply(linked, 1, FUN = function(x) lines(sim_x, x)) ## NULL "],["homework-week-3.html", "4 Homework: Week 3 4.1 Overview 4.2 Question 1 4.3 Question 2 4.4 Question 3", " 4 Homework: Week 3 2021-08-25 [updated: 2021-10-07] 4.1 Overview All three problems below are based on the same data. The data in data(foxes) are 116 foxes from 30 different urban groups in England. These foxes are like street gangs. Group size varies from 2 to 8 individuals. Each group maintains its own (almost exclusive) urban territory. Some territories are larger than others. The area variable encodes this information. Some territories also have more avgfood than others. We want to model the weight of each fox. For the problems below, assume this DAG 4.1.1 Setup # DAG dag &lt;- dagify( weight ~ groupsize + avgfood, groupsize ~ avgfood, avgfood ~ area, exposure = &#39;area&#39;, outcome = &#39;weight&#39; ) dag_plot(dag) 4.2 Question 1 Use a model to infer the total causal influence of area on weight. Would increasing the area available to each fox make it heavier (healthier)? You might want to standardize the variables. Regardless, use prior predictive simulation to show that your model’s prior predictions stay within the possible outcome range. 4.2.1 Workings Area on weight scale(weight) ~ dnorm(mu, sigma) mu &lt;- a + b * (scale(area)) a: intercept when weight and area are scaled, the expected intercept is 0 therefore a ~ dnorm(0, 0.5) b: beta, rate of change given one unit of increase in area b ~ dnorm(0, 1) sigma: standard deviation uniform prior sigma ~ dunif(0, 50) 4.2.2 Model data(foxes) foxes$scale_area &lt;- scale(foxes$area) foxes$scale_weight &lt;- scale(foxes$weight) m1 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bArea * scale_area, a ~ dnorm(0, 0.05), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) 4.2.3 Prior predictive simulation prior &lt;- extract.prior(m1) l &lt;- link(m1, post = prior, data = list(scale_area = c(-2, 2))) plot_link(l, 20) ## NULL 4.2.4 Paths Interest: Area on Weight Paths Area -&gt; Avgfood -&gt; Weight Area -&gt; Avgfood -&gt; Groupsize -&gt; Weight Avgfood and Groupsize are pipes between Area and Weight. There are no backdoors or colliders. 4.2.5 Interpretation Would increasing the area available to each fox make it heavier (healthier)? bArea has a mean of 0.02, with compatibility intervals around 0. Therefore the model does not indicate a total causal influence of area on the weight. precis(m1) ## mean sd 5.5% 94.5% ## a -0.000001 0.044 -0.07 0.07 ## bArea 0.018844 0.091 -0.13 0.16 ## sigma 0.995497 0.065 0.89 1.10 post &lt;- extract.samples(m1) s &lt;- sim(m1, data = list(scale_area = c(-2, 2)), post = post) ggplot(data.table(s), aes(V1)) + stat_halfeye(.width = .89) 4.3 Question 2 Now infer the causal impact of adding food to a territory. Would this make foxes heavier? Which covariates do you need to adjust for to estimate the total causal influence of food? 4.3.1 Paths Interest: Food on weight Paths: Food -&gt; Weight Food -&gt; Groupsize -&gt; Weight Groupsize is a pipe between Area and Weight. There are no backdoors or colliders. 4.3.2 Model foxes$scale_avgfood &lt;- scale(foxes$avgfood) m2 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood, a ~ dnorm(0, 0.05), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) precis(m2) ## mean sd 5.5% 94.5% ## a 0.0000018 0.044 -0.07 0.07 ## bFood -0.0241757 0.091 -0.17 0.12 ## sigma 0.9953723 0.065 0.89 1.10 post &lt;- extract.samples(m2) s &lt;- sim(m2, data = list(scale_avgfood = c(-2, 2)), post = post) ggplot(data.table(s), aes(V1)) + stat_halfeye(.width = .89) 4.3.3 Interpretation Would this make foxes heavier? Which covariates do you need to adjust for to estimate the total causal influence of food? bFood has a mean of -0.02, with compatibility intervals around 0. The model does not indicate a total causal influence of area on the weight. No covariates are needed to estiamte the total causal influence of food because there are no backdoors or colliders. 4.4 Question 3 Now infer the causal impact of group size. Which covariates do you need to adjust for? Looking at the posterior distribution of the resulting model, what do you think explains these data? That is, can you explain the estimates for all three problems? How do they go together? 4.4.1 Paths Interest: Group size on weight Paths: Groupsize -&gt; Weight Groupsize &lt;- Avgfood -&gt; Weight Avgfood is a collider between Groupsize and Weight. There is a backdoor on Groupsize and the path is closed. foxes$scale_groupsize &lt;- scale(foxes$groupsize) m3 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bGroupsize * scale_groupsize + bFood * scale_avgfood, a ~ dnorm(0, 0.05), bGroupsize ~ dnorm(0, 0.5), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) precis(m3) ## mean sd 5.5% 94.5% ## a 0.00000062 0.043 -0.069 0.069 ## bGroupsize -0.57250071 0.180 -0.860 -0.285 ## bFood 0.47624205 0.180 0.189 0.763 ## sigma 0.94590281 0.062 0.846 1.046 DT &lt;- melt(data.table(extract.samples(m3))[, .(bGroupsize, bFood)]) ## Warning in melt.data.table(data.table(extract.samples(m3))[, .(bGroupsize, : ## id.vars and measure.vars are internally guessed when both are &#39;NULL&#39;. All ## non-numeric/integer/logical type columns are considered id.vars, which in this ## case are columns []. Consider providing at least one of &#39;id&#39; or &#39;measure&#39; vars ## in future. ggplot(DT) + geom_density(aes(value, fill = variable), alpha = 0.6) + theme_bw() + scale_fill_viridis_d(begin = 0.3, end = 0.8) 4.4.2 Interpretation Which covariates do you need to adjust for? Looking at the posterior distribution of the resulting model, what do you think explains these data? That is, can you explain the estimates for all three problems? How do they go together? The Avgfood covariate needs to be included since it is a collider between Groupsize and Weight. The mean and compatibility intervals of bFood are positive, while the mean and compatibility intervals of bGroupsize are negative. This indicates food’s positive relationship with weight could be buffered or interacting with the negative relationship of group size. Increased food leads to increased body weight, but more food also results in larger groups, which decreases the food availability. "],["homework-week-4.html", "5 Homework: Week 4 5.1 Question 1 5.2 Question 2 5.3 Question 3", " 5 Homework: Week 4 2021-08-30 [updated: 2021-10-07] 5.1 Question 1 Consider three fictional Polynesian islands. On each there is a Royal Ornithologist charged by the king with surveying the birb population. They have each found the following proportions of 5 important birb species: # Data birds &lt;- matrix( c(0.2, 0.2, 0.2, 0.2, 0.2, 0.8, 0.1, 0.05, 0.025, 0.025, 0.05, 0.15, 0.7, 0.05, 0.05), nrow = 3, ncol = 5, byrow = TRUE ) dimnames(birds) &lt;- list(as.character(1:3), LETTERS[1:5]) birds ## A B C D E ## 1 0.20 0.20 0.20 0.200 0.200 ## 2 0.80 0.10 0.05 0.025 0.025 ## 3 0.05 0.15 0.70 0.050 0.050 First, compute the entropy of each island’s birb distribution. Interpret these entropy values DT &lt;- melt(data.table(birds, keep.rownames = &#39;island&#39;), id.vars = &#39;island&#39;, variable.name = &#39;id&#39;, value.name = &#39;proportion&#39;) # Entropy entropy &lt;- function(p) -sum(p * log(p)) DT[, .(entropy = entropy(proportion)), by = island] ## island entropy ## 1: 1 1.61 ## 2: 2 0.74 ## 3: 3 0.98 The information entropy describes the uncertainty in a distribution of probabilities given the average log-probability of an event (from Statistical Rethinking 7.2). Island 1 has the highest entropy, with the flat probability of 0.2 across 5 bird species. Island 2 has the lowest entropy, including species A with the highest overall proportion 0.8. Second, use each island’s birb distribution to predict the other two. This means to compute the K-L Divergence of each island from the others, treating each island as if it were a statistical model of the other islands. You should end up with 6 different K-L Divergence values. Which island predicts the others best? Why? divergence &lt;- function(p, q) sum(p * (log(p) - log(q))) z &lt;- CJ(p = DT$island, q = DT$island, unique = TRUE)[, row_id := .I] z[, div := divergence(DT[island == p, proportion], DT[island == q, proportion]), by = row_id] z[p != q] ## p q row_id div ## 1: 1 2 2 0.97 ## 2: 1 3 3 0.64 ## 3: 2 1 4 0.87 ## 4: 2 3 6 2.01 ## 5: 3 1 7 0.63 ## 6: 3 2 8 1.84 divergence(p, q) = “Average difference in log probability between the target (p) and the model (q).” Model 1 predicts target 3 best (lowest divergence at 0.63) and target 2 best (lowest divergence at 0.87) because it has the highest entropy. Model 3 predicts target 1 best (lowest divergence at 0.64) because it has higher entropy than model 2. 5.2 Question 2 Recall the marriage, age, and happiness collider bias example from Chapter 6. Run models m6.9 and m6.10 again. 5.2.1 DAG dag &lt;- dagify( marriage ~ happiness, marriage ~ age, exposure = &#39;age&#39;, outcome = &#39;happiness&#39; ) dag_plot(dag) 5.2.2 Data d &lt;- sim_happiness(seed = 1977, N_years = 1e3) d2 &lt;- d[d$age &gt; 17,] d2$A &lt;- (d2$age - 18) / (65 - 18) d2$mid &lt;- d2$married + 1 precis(d2) ## mean sd 5.5% 94.5% histogram ## age 41.5000000000000000 13.86 20.000 63.00 ▃▇▇▇▇▇▇▇▇▇ ## married 0.4072916666666667 0.49 0.000 1.00 ▇▁▁▁▁▁▁▁▁▅ ## happiness -0.0000000000000001 1.21 -1.789 1.79 ▇▅▇▅▅▇▅▇ ## A 0.5000000000000000 0.29 0.043 0.96 ▇▇▇▅▇▇▅▇▇▇ ## mid 1.4072916666666666 0.49 1.000 2.00 ▇▁▁▁▁▁▁▁▁▅ 5.2.3 Models m6.9 &lt;- quap( alist( happiness ~ dnorm(mu, sigma), mu &lt;- a[mid] + bA * A, a[mid] ~ dnorm(0, 1), bA ~ dnorm(0, 2), sigma ~ dexp(1) ), data = d2 ) precis(m6.9, depth = 2) ## mean sd 5.5% 94.5% ## a[1] -0.24 0.063 -0.34 -0.13 ## a[2] 1.26 0.085 1.12 1.39 ## bA -0.75 0.113 -0.93 -0.57 ## sigma 0.99 0.023 0.95 1.03 m6.10 &lt;- quap( alist( happiness ~ dnorm(mu, sigma), mu &lt;- a + bA * A, a ~ dnorm(0, 1), bA ~ dnorm(0, 2), sigma ~ dexp(1) ), data = d2 ) precis(m6.10, depth = 2) ## mean sd 5.5% 94.5% ## a 0.00000016 0.077 -0.12 0.12 ## bA -0.00000027 0.132 -0.21 0.21 ## sigma 1.21318761 0.028 1.17 1.26 5.2.4 Interpretation Compare these two models using WAIC (or LOO, they will produce identical results). Which model is expected to make better predictions? Which model provides the correct causal inference about the influence of age on happiness? Can you explain why the answers to these two questions disagree? rethinking::compare(m6.9, m6.10) ## WAIC SE dWAIC dSE pWAIC weight ## m6.9 2714 38 0 NA 3.7 1 ## m6.10 3102 28 388 35 2.3 0 Model m6.9 includes marriage while m6.10 does not. The causal influence of age on happiness is confounded by marriage because marriage is a collider between age and happiness. Conditioning on marriage opens the path between age and happiness, making age and happiness independent. Therefore, despite the WAIC for m6.9 being lower, it does not tell us anything about causation between the variables. 5.3 Question 3 Reconsider the urban fox analysis from last week’s homework. Use WAIC or LOO based model comparison on five different models, each using weight as the outcome, and containing these sets of predictor variables: avgfood + groupsize + area avgfood + groupsize groupsize + area avgfood area 5.3.1 Data data(foxes) 5.3.2 Models foxes$scale_area &lt;- scale(foxes$area) foxes$scale_weight &lt;- scale(foxes$weight) foxes$scale_avgfood &lt;- scale(foxes$avgfood) foxes$scale_groupsize &lt;- scale(foxes$groupsize) m1 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood + bGroup * scale_groupsize + bArea * scale_area, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m2 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood + bGroup * scale_groupsize, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m3 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bGroup * scale_groupsize + bArea * scale_area, a ~ dnorm(0, 0.2), bArea ~ dnorm(0, 0.5), bGroup ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m4 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bFood * scale_avgfood, a ~ dnorm(0, 0.2), bFood ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) m5 &lt;- quap( alist( scale_weight ~ dnorm(mu, sigma), mu &lt;- a + bArea * scale_area, a ~ dnorm(0, 0.2), bArea ~ dnorm(0, 0.5), sigma ~ dunif(0, 50) ), data = foxes ) 5.3.3 DAG dag &lt;- dagify( weight ~ groupsize + avgfood, groupsize ~ avgfood, avgfood ~ area, exposure = &#39;area&#39;, outcome = &#39;weight&#39; ) dag_plot(dag) 5.3.4 Interpretation Can you explain the relative differences in WAIC scores, using the fox DAG from last week’s homework? Be sure to pay attention to the standard error of the score differences (dSE). weight ~ avgfood + groupsize + area weight ~ avgfood + groupsize weight ~ groupsize + area weight ~ avgfood weight ~ area compare_models &lt;- rethinking::compare(m1, m2, m3, m4, m5) compare_models ## WAIC SE dWAIC dSE pWAIC weight ## m1 323 16 0.00 NA 4.6 0.4568 ## m2 324 16 0.97 3.6 3.7 0.2811 ## m3 324 16 1.15 2.9 3.8 0.2575 ## m4 333 14 10.56 7.1 2.4 0.0023 ## m5 334 14 10.66 7.2 2.6 0.0022 compare_models@dSE ## m1 m2 m3 m4 m5 ## m1 NA 3.6 2.9 7.13 7.19 ## m2 3.6 NA 5.8 6.55 6.79 ## m3 2.9 5.8 NA 6.54 6.59 ## m4 7.1 6.5 6.5 NA 0.84 ## m5 7.2 6.8 6.6 0.84 NA # Filled points: in-sample deviance # Open points: WAIC # Dark lines: standard error of WAIC # Light lines with triangles: standard error of difference in WAIC between each model and top model plot(compare_models) coeftab(m1, m2, m3, m4, m5) ## m1 m2 m3 m4 m5 ## a 0 0 0 0 0 ## bFood 0.30 0.48 NA -0.02 NA ## bGroup -0.64 -0.57 -0.48 NA NA ## bArea 0.28 NA 0.41 NA 0.02 ## sigma 0.93 0.95 0.95 1.00 1.00 ## nobs 116 116 116 116 116 Weight is the outcome in all of the models. Looking at the DAG, we see a potential back door into avgfood and group size, but no colliders. Avgfood is a path between area and weight, as is groupsize between avgfood and weight. The paths for each variable that does not have confounds shown in the DAG: Model 2: Weight ~ groupsize + avgfood (to determine causal effect of groupsize on weight, including avgfood to open the collider) Model 4: Weight ~ avgfood (to determine causal effect of avgfood, without groupsize confusing the relationship since it’s a pipe) Model 5: Weight ~ area (with avgfood and groupsize excluded) Model 1 includes the most parameters and, as expected, has the highest model fit. The dSE column returned by the compare function indicates the standard error of the difference between models, with the @dSE slot showing this for all combinations of models. Models 4 and 5 barely differ, as there is likely a strong influence of area on average food. Including both area and avgfood is like conditioning on the intermediate treatment effect. Models 4 and 5 are most different from models 1, 2, 3. Models 1, 2, and 3 all have groupsize and the WAIC and coeftab, as well as the DAG, indicate the models have the same inference. "],["homework-week-5.html", "6 Homework: Week 5 6.1 Question 1 6.2 Question 2 6.3 Question 3", " 6 Homework: Week 5 2021-09-03 [updated: 2021-10-07] 6.1 Question 1 Consider the data(Wines2012) data table. These data are expert ratings of 20 different French and American wines by 9 different French and American judges. 6.1.1 Data Your goal is to model score, the subjective rating assigned by each judge to each wine. I recommend standardizing it. In this first problem, consider only variation among judges and wines. Construct index variables of judge and wine and then use these index variables to construct a linear regression model. DT &lt;- data_wines() n_index_judge &lt;- DT[, uniqueN(index_judge)] n_index_wine &lt;- DT[, uniqueN(index_wine)] n_rows &lt;- DT[, .N] 6.1.2 Prior predictive simulation writeLines(readLines(tar_read(stan_file_w05_q1_prior))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_judges; ## int&lt;lower=0&gt; N_wines; ## } ## parameters{ ## real alpha; ## vector[N_judges] beta_judge; ## vector[N_wines] beta_wine; ## real&lt;lower=0&gt; sigma; ## } ## model{ ## sigma ~ exponential(1); ## beta_wine ~ normal(0, 0.5); ## beta_judge ~ normal(0, 0.5); ## alpha ~ normal(0, 0.2); ## } q1_prior_draws &lt;- tar_read(stan_mcmc_w05_q1_prior)$draws() mcmc_areas(q1_prior_draws, regex_pars = &#39;judge&#39;) mcmc_areas(q1_prior_draws, regex_pars = &#39;wine&#39;) Justify your priors. You should end up with 9 judge parameters and 20 wine parameters. Given the parameters are scaled, the prior predictive plots show scaled wine scores mostly between -2 and 2. Since we do not have any prior knowledge about how this relationship (positive/negative slopes), we are satisfied with this relatively conservative prior. 6.1.3 Model Use ulam instead of quap to build this model, and be sure to check the chains for convergence. If you’d rather build the model directly in Stan or PyMC3, go ahead. I just want you to use Hamiltonian Monte Carlo instead of quadratic approximation. writeLines(readLines(tar_read(stan_file_w05_q1))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_judges; ## int&lt;lower=0&gt; N_wines; ## int index_judge[N]; ## int index_wine[N]; ## vector[N] scale_score; ## } ## parameters{ ## real alpha; ## vector[N_judges] beta_judge; ## vector[N_wines] beta_wine; ## real&lt;lower=0&gt; sigma; ## } ## model{ ## alpha ~ normal(0, 0.2); ## beta_wine ~ normal(0, 0.5); ## beta_judge ~ normal(0, 0.5); ## sigma ~ exponential(1); ## ## vector[N] mu; ## mu = beta_wine[index_wine] + beta_judge[index_judge]; ## scale_score ~ normal(mu, sigma); ## } q1_draws &lt;- tar_read(stan_mcmc_w05_q1)$draws() setDT(q1_draws) How do you interpret the variation among individual judges and individual wines? Do you notice any patterns, just by plotting the differences? Which judges gave the highest/lowest ratings? Which wines were rated worst/ best on average? # Judges precis(q1_draws, depth = 2)[3:11,] ## mean sd 5.5% 94.5% histogram ## beta_judge[1] -0.54 0.19 -0.861 -0.233 ▁▁▁▁▂▃▇▇▇▅▂▁▁▁▁ ## beta_judge[2] -0.34 0.19 -0.644 -0.038 ▁▁▁▁▂▃▇▇▇▅▂▁▁▁ ## beta_judge[3] 0.80 0.20 0.490 1.109 ▁▁▃▇▇▂▁▁ ## beta_judge[4] 0.13 0.20 -0.179 0.452 ▁▁▁▃▇▅▂▁ ## beta_judge[5] -0.65 0.19 -0.963 -0.343 ▁▁▁▁▂▃▇▇▇▃▂▁▁▁ ## beta_judge[6] 0.48 0.20 0.162 0.792 ▁▁▁▅▇▃▁▁ ## beta_judge[7] -0.28 0.20 -0.592 0.035 ▁▁▁▁▃▅▇▇▇▃▂▁▁▁ ## beta_judge[8] 0.21 0.20 -0.106 0.527 ▁▁▂▇▇▂▁▁▁ ## beta_judge[9] 0.21 0.19 -0.089 0.519 ▁▁▂▇▇▃▁▁▁ melt(q1_draws, measure.vars = patterns(&#39;beta_judge&#39;))[, .(mean_score = mean(value)), variable][order(-mean_score)] ## variable mean_score ## 1: beta_judge[3] 0.80 ## 2: beta_judge[6] 0.48 ## 3: beta_judge[9] 0.21 ## 4: beta_judge[8] 0.21 ## 5: beta_judge[4] 0.13 ## 6: beta_judge[7] -0.28 ## 7: beta_judge[2] -0.34 ## 8: beta_judge[1] -0.54 ## 9: beta_judge[5] -0.65 mcmc_areas(q1_draws, regex_pars = &#39;judge&#39;) # Wines precis(q1_draws, depth = 2)[12:31,] ## mean sd 5.5% 94.5% histogram ## beta_wine[1] 0.1175 0.25 -0.282 0.526 ▁▁▂▅▇▇▂▁▁▁ ## beta_wine[2] 0.2271 0.26 -0.187 0.630 ▁▁▁▃▇▇▅▂▁▁ ## beta_wine[3] -0.1017 0.26 -0.514 0.314 ▁▁▂▅▇▅▂▁▁▁ ## beta_wine[4] 0.2406 0.26 -0.174 0.648 ▁▁▁▃▇▇▅▂▁▁ ## beta_wine[5] 0.0668 0.26 -0.351 0.477 ▁▁▁▂▇▇▅▂▁▁▁ ## beta_wine[6] -0.0117 0.26 -0.431 0.407 ▁▁▁▃▇▇▃▁▁▁ ## beta_wine[7] -0.0901 0.26 -0.515 0.302 ▁▁▂▅▇▇▂▁▁▁ ## beta_wine[8] -0.1886 0.26 -0.608 0.232 ▁▁▁▃▇▇▃▁▁▁ ## beta_wine[9] -0.1196 0.24 -0.516 0.271 ▁▁▂▅▇▅▂▁▁ ## beta_wine[10] -0.1401 0.26 -0.554 0.273 ▁▁▁▁▂▇▇▅▂▁▁ ## beta_wine[11] 0.0858 0.26 -0.329 0.509 ▁▁▁▂▅▇▅▂▁▁▁ ## beta_wine[12] 0.4641 0.26 0.035 0.869 ▁▁▁▂▅▇▅▂▁▁▁ ## beta_wine[13] -0.3145 0.26 -0.716 0.091 ▁▁▁▂▅▇▅▂▁▁▁ ## beta_wine[14] 0.2234 0.27 -0.200 0.642 ▁▁▁▃▇▇▅▂▁▁ ## beta_wine[15] 0.0963 0.26 -0.311 0.515 ▁▁▁▂▅▇▅▂▁▁▁ ## beta_wine[16] -0.0234 0.26 -0.424 0.389 ▁▁▁▁▅▇▇▃▁▁▁ ## beta_wine[17] 0.0051 0.26 -0.420 0.432 ▁▁▁▃▇▇▃▁▁▁ ## beta_wine[18] -0.1674 0.26 -0.591 0.261 ▁▁▁▃▇▇▅▂▁▁ ## beta_wine[19] -0.7246 0.26 -1.137 -0.303 ▁▁▁▂▇▇▅▂▁▁ ## beta_wine[20] 0.3215 0.25 -0.068 0.717 ▁▁▁▂▅▇▇▂▁▁ melt(q1_draws, measure.vars = patterns(&#39;beta_wine&#39;))[, .(mean_score = mean(value)), variable][order(-mean_score)] ## variable mean_score ## 1: beta_wine[12] 0.4641 ## 2: beta_wine[20] 0.3215 ## 3: beta_wine[4] 0.2406 ## 4: beta_wine[2] 0.2271 ## 5: beta_wine[14] 0.2234 ## 6: beta_wine[1] 0.1175 ## 7: beta_wine[15] 0.0963 ## 8: beta_wine[11] 0.0858 ## 9: beta_wine[5] 0.0668 ## 10: beta_wine[17] 0.0051 ## 11: beta_wine[6] -0.0117 ## 12: beta_wine[16] -0.0234 ## 13: beta_wine[7] -0.0901 ## 14: beta_wine[3] -0.1017 ## 15: beta_wine[9] -0.1196 ## 16: beta_wine[10] -0.1401 ## 17: beta_wine[18] -0.1674 ## 18: beta_wine[8] -0.1886 ## 19: beta_wine[13] -0.3145 ## 20: beta_wine[19] -0.7246 mcmc_areas(q1_draws, regex_pars = &#39;wine&#39;) Accounting for judges, most wines are scored with similar distributions. Wine 19 however was particularly poorly scored. Judges, however, have much more variable scoring with three individuals (judges 1, 2, 5) entirely or almost entirely scoring lower than other judges. The worst scoring judge was judge 5. 6.2 Question 2 Now consider three features of the wines and judges: (1) flight: Whether the wine is red or white. (2) wine.amer: Indicator variable for American wines. (3) judge.amer: Indicator variable for American judges. Use indicator or index variables to model the influence of these features on the scores. Omit the individual judge and wine index variables from Problem 1. Do not include interaction effects yet. Again use ulam, justify your priors, and be sure to check the chains. 6.2.1 Data DT &lt;- data_wines() n_index_flight &lt;- DT[, uniqueN(flight)] n_index_wine_american &lt;- DT[, uniqueN(index_wine_american)] n_index_judge_american &lt;- DT[, uniqueN(index_judge_american)] n_rows &lt;- DT[, .N] q2_data &lt;- c( as.list(DT[, .(scale_score = as.numeric(scale_score), index_flight, index_wine_american, index_judge_american)]), N_flights = n_index_flight, N_wine_american = n_index_wine_american, N_judge_american = n_index_judge_american, N = n_rows ) 6.2.2 Priors writeLines(readLines(tar_read(stan_file_w05_q2_prior))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_flights; ## int&lt;lower=0&gt; N_wine_american; ## int&lt;lower=0&gt; N_judge_american; ## } ## parameters{ ## real alpha; ## vector[N_flights] beta_flights; ## vector[N_wine_american] beta_wine_american; ## vector[N_judge_american] beta_judge_american; ## real&lt;lower=0&gt; sigma; ## } ## model{ ## alpha ~ normal(0, 0.2); ## beta_flights ~ normal(0, 0.5); ## beta_wine_american ~ normal(0, 0.5); ## beta_judge_american ~ normal(0, 0.5); ## sigma ~ exponential(1); ## } q2_prior_draws &lt;- tar_read(stan_mcmc_w05_q2_prior)$draws() mcmc_areas(q2_prior_draws, regex_pars = &#39;flights&#39;) mcmc_areas(q2_prior_draws, regex_pars = &#39;judge&#39;) mcmc_areas(q2_prior_draws, regex_pars = &#39;wine&#39;) 6.2.3 Model writeLines(readLines(tar_read(stan_file_w05_q2))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_flights; ## int&lt;lower=0&gt; N_wine_american; ## int&lt;lower=0&gt; N_judge_american; ## ## int index_flight[N]; ## int index_wine_american[N]; ## int index_judge_american[N]; ## ## vector[N] scale_score; ## } ## parameters{ ## real alpha; ## vector[N_flights] beta_flights; ## vector[N_wine_american] beta_wine_american; ## vector[N_judge_american] beta_judge_american; ## real&lt;lower=0&gt; sigma; ## } ## model{ ## alpha ~ normal(0, 0.2); ## beta_flights ~ normal(0, 0.5); ## beta_wine_american ~ normal(0, 0.5); ## beta_judge_american ~ normal(0, 0.5); ## sigma ~ exponential(1); ## ## vector[N] mu; ## mu = beta_flights[index_flight] + beta_wine_american[index_wine_american] + beta_judge_american[index_judge_american]; ## scale_score ~ normal(mu, sigma); ## } q2 &lt;- tar_read(stan_mcmc_w05_q2) q2_draws &lt;- q2$draws() q2$summary() ## # A tibble: 9 × 10 ## variable mean median sd mad q5 q95 rhat ess_bulk ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lp__ -9.24e+1 -9.20e+1 2.04 1.92 -96.2 -89.7 1.00 1746. ## 2 alpha 8.61e-4 -1.84e-4 0.198 0.196 -0.312 0.336 1.00 3101. ## 3 beta_flights[… -2.04e-3 -9.90e-4 0.297 0.295 -0.501 0.484 1.00 1876. ## 4 beta_flights[… -5.52e-3 -1.04e-2 0.298 0.303 -0.483 0.489 1.00 1929. ## 5 beta_wine_ame… -8.69e-2 -8.85e-2 0.303 0.302 -0.575 0.403 1.00 1730. ## 6 beta_wine_ame… 9.67e-2 1.02e-1 0.301 0.302 -0.406 0.589 1.00 1847. ## 7 beta_judge_am… -1.16e-1 -1.14e-1 0.296 0.295 -0.590 0.361 1.00 1864. ## 8 beta_judge_am… 1.21e-1 1.20e-1 0.291 0.290 -0.347 0.602 1.00 1762. ## 9 sigma 1.00e+0 9.99e-1 0.0534 0.0529 0.918 1.09 1.00 3052. ## # … with 1 more variable: ess_tail &lt;dbl&gt; mcmc_trace(q2_draws) # Recall: DT[, .N, .(flight, index_flight)] ## flight index_flight N ## 1: white 1 90 ## 2: red 2 90 DT[, .N, .(judge.amer, index_judge_american)] ## judge.amer index_judge_american N ## 1: 0 1 80 ## 2: 1 2 100 DT[, .N, .(wine.amer, index_wine_american)] ## wine.amer index_wine_american N ## 1: 1 1 108 ## 2: 0 2 72 labs &lt;- c( &#39;beta_flights[1]&#39; = &#39;White Wine&#39;, &#39;beta_flights[2]&#39; = &#39;Red Wine&#39;, &#39;beta_wine_american[1]&#39; = &#39;French Wine&#39;, &#39;beta_wine_american[2]&#39; = &#39;American Wine&#39;, &#39;beta_judge_american[1]&#39; = &#39;American Judge&#39;, &#39;beta_judge_american[2]&#39; = &#39;French Judge&#39; ) mcmc_areas(q2_draws, regex_pars = &#39;flight&#39;) + scale_y_discrete(labels = labs) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. mcmc_areas(q2_draws, regex_pars = &#39;judge&#39;) + scale_y_discrete(labels = labs) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. mcmc_areas(q2_draws, regex_pars = &#39;wine&#39;) + scale_y_discrete(labels = labs) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. 6.3 Question 3 Now consider two-way interactions among the three features. You should end up with three different interaction terms in your model. These will be easier to build, if you use indicator variables. Again use ulam, justify your priors, and be sure to check the chains. Explain what each interaction means. Be sure to interpret the model’s predictions on the outcome scale (mu, the expected score), not on the scale of individual parameters. You can use link to help with this, or just use your knowledge of the linear model instead. What do you conclude about the features and the scores? Can you relate the results of your model(s) to the individual judge and wine inferences from Problem 1? 6.3.1 Data DT &lt;- data_wines() n_index_interactions &lt;- DT[, uniqueN(index_interactions)] q3_data &lt;- c( as.list(DT[, .(scale_score = as.numeric(scale_score), index_interactions)]), N_interactions = n_index_interactions, N = n_rows ) 6.3.2 Model writeLines(readLines(tar_read(stan_file_w05_q3))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_interactions; ## ## int index_interactions[N]; ## ## vector[N] scale_score; ## } ## parameters{ ## real alpha; ## vector[N_interactions] beta_interactions; ## real&lt;lower=0&gt; sigma; ## } ## model{ ## alpha ~ normal(0, 0.2); ## beta_interactions ~ normal(0, 0.25); ## sigma ~ exponential(1); ## ## vector[N] mu; ## mu = alpha + beta_interactions[index_interactions]; ## ## scale_score ~ normal(mu, sigma); ## } q3 &lt;- tar_read(stan_mcmc_w05_q3) q3_draws &lt;- q3$draws() q3$summary() ## # A tibble: 11 × 10 ## variable mean median sd mad q5 q95 rhat ess_bulk ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lp__ -9.25e+1 -9.22e+1 2.23 2.07 -96.7 -89.5 1.00 1640. ## 2 alpha 1.86e-3 1.15e-3 0.101 0.0991 -0.164 0.168 1.00 3164. ## 3 beta_interac… 2.58e-2 2.68e-2 0.176 0.174 -0.266 0.317 1.00 5526. ## 4 beta_interac… -1.91e-1 -1.90e-1 0.185 0.183 -0.503 0.113 1.00 6850. ## 5 beta_interac… 2.91e-2 2.83e-2 0.158 0.161 -0.228 0.289 1.00 4941. ## 6 beta_interac… 1.10e-1 1.08e-1 0.177 0.179 -0.183 0.402 1.00 5471. ## 7 beta_interac… 1.26e-1 1.27e-1 0.179 0.178 -0.174 0.421 1.00 6705. ## 8 beta_interac… -2.52e-1 -2.54e-1 0.166 0.167 -0.524 0.0208 1.00 6633. ## 9 beta_interac… 1.76e-1 1.77e-1 0.174 0.173 -0.105 0.461 1.00 6188. ## 10 beta_interac… -1.45e-2 -1.48e-2 0.164 0.165 -0.283 0.261 1.00 4721. ## 11 sigma 9.91e-1 9.90e-1 0.0520 0.0535 0.909 1.08 1.00 8835. ## # … with 1 more variable: ess_tail &lt;dbl&gt; mcmc_trace(q3_draws) DT[, judge_char := ifelse(judge.amer == 0, &#39;French Judge&#39;, &#39;American Judge&#39;)] DT[, wine_char := ifelse(wine.amer == 0, &#39;French Wine&#39;, &#39;American Wine&#39;)] labs &lt;- DT[, .(.GRP, paste(.BY, collapse = &#39;, &#39;)), by = .(wine_char, judge_char, as.character(flight))][, .(GRP, V2)] labs &lt;- setNames(labs$V2, paste0(&#39;beta_interactions[&#39;, labs$GRP, &#39;]&#39;)) mcmc_areas(q3_draws, regex_pars = &#39;interaction&#39;) + scale_y_discrete(labels = labs) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will ## replace the existing scale. "],["homework-week-6.html", "7 Homework: Week 6 7.1 Question 1", " 7 Homework: Week 6 2021-09-06 [updated: 2021-10-07] 7.1 Question 1 The data in data(NWOGrants) are outcomes for scientific funding applications for the Netherlands Organization for Scientific Research (NWO) from 2010–2012 (see van der Lee and Ellemers doi:10.1073/pnas.1510159112). These data have a very similar structure to the UCBAdmit data discussed in Chapter 11. I want you to consider a similar question: What are the total and indirect causal effects of gender on grant awards? Consider a mediation path (a pipe) through dis- cipline. Draw the corresponding DAG and then use one or more binomial GLMs to answer the question. 7.1.1 Data DT &lt;- data_grants() precis(DT) ## mean sd 5.5% 94.5% histogram ## discipline NaN NA NA NA ## gender NaN NA NA NA ## applications 156.8 119.52 37.0 410 ▅▇▅▅▃▂▁▁▃ ## awards 25.9 15.95 8.5 48 ▂▅▅▇▂▇▅▂▁▅▁▁▂ ## index_gender 1.5 0.51 1.0 2 ▇▁▁▁▁▁▁▁▁▇ ## index_discipline 5.0 2.66 1.0 9 ▇▃▃▃▃▃▃▃ summary(DT) ## discipline gender applications awards index_gender ## Chemical sciences :2 f:9 Min. : 9 Min. : 2 Min. :1.0 ## Earth/life sciences:2 m:9 1st Qu.: 70 1st Qu.:14 1st Qu.:1.0 ## Humanities :2 Median :130 Median :24 Median :1.5 ## Interdisciplinary :2 Mean :157 Mean :26 Mean :1.5 ## Medical sciences :2 3rd Qu.:220 3rd Qu.:33 3rd Qu.:2.0 ## Physical sciences :2 Max. :425 Max. :65 Max. :2.0 ## (Other) :6 ## index_discipline ## Min. :1 ## 1st Qu.:3 ## Median :5 ## Mean :5 ## 3rd Qu.:7 ## Max. :9 ## Discipline: factor with 9 levels Gender: factor with 2 levels in this data (…) Applications: count Awards: count q1_data &lt;- c( as.list(DT[, .(awards, applications, index_gender, index_discipline)]), N = DT[, .N], N_gender = DT[, uniqueN(index_gender)], N_discipline = DT[, uniqueN(index_discipline)] ) 7.1.2 DAG dag &lt;- dagify( awards ~ index_gender + index_discipline, index_discipline ~ index_gender, exposure = &#39;index_gender&#39;, outcome = &#39;awards&#39; ) dag_plot(dag) 7.1.3 Priors writeLines(readLines(tar_read(stan_b_file_w06_q1_prior))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_gender; ## int&lt;lower=0&gt; N_discipline; ## } ## parameters{ ## real alpha; ## vector[N_gender] beta_gender; ## vector[N_discipline] beta_discipline; ## real&lt;lower=0&gt; sigma; ## real&lt;lower=0,upper=1&gt; theta; ## } ## model{ ## alpha ~ normal(0, 0.2); ## beta_gender ~ normal(0, 0.25); ## beta_discipline ~ normal(0, 0.25); ## sigma ~ exponential(1); ## theta ~ beta(1, 1); ## } q1_prior_draws &lt;- tar_read(stan_b_mcmc_w06_q1_prior)$draws() mcmc_areas(q1_prior_draws, regex_pars = &#39;theta&#39;) mcmc_areas(q1_prior_draws, regex_pars = &#39;sigma&#39;) mcmc_areas(q1_prior_draws, regex_pars = &#39;beta_gender&#39;) mcmc_areas(q1_prior_draws, regex_pars = &#39;beta_discipline&#39;) 7.1.4 Model writeLines(readLines(tar_read(stan_b_file_w06_q1))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_gender; ## int awards[N]; ## int applications [N]; ## int index_gender[N]; ## } ## parameters{ ## vector[N_gender] alpha; ## } ## model{ ## vector[N] p; ## alpha ~ normal(-1, 1); ## ## p = inv_logit(alpha[index_gender]); ## awards ~ binomial(applications, p); ## } q1_draws &lt;- tar_read(stan_b_mcmc_w06_q1)$draws() mcmc_areas(q1_draws, regex_pars = &#39;alpha&#39;) q1_draws$dif_alpha &lt;- (inv.logit(q1_draws$`alpha[1]`) - inv.logit(q1_draws$`alpha[2]`)) * 100 mcmc_areas(q1_draws, regex_pars = &#39;dif_alpha&#39;) With discipline writeLines(readLines(tar_read(stan_b_file_w06_q1_discipline))) ## data { ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_gender; ## int&lt;lower=0&gt; N_discipline; ## int awards[N]; ## int applications [N]; ## int index_gender[N]; ## int index_discipline[N]; ## } ## parameters{ ## vector[N_gender] alpha; ## vector[N_discipline] beta; ## } ## model{ ## vector[N] p; ## alpha ~ normal(-1, 1); ## beta ~ normal(0, 0.25); ## ## p = inv_logit(alpha[index_gender] + beta[index_discipline]); ## awards ~ binomial(applications, p); ## } q1_discipline_draws &lt;- tar_read(stan_b_mcmc_w06_q1_discipline)$draws() mcmc_areas(q1_discipline_draws, regex_pars = &#39;alpha&#39;) mcmc_areas(q1_discipline_draws, regex_pars = &#39;beta&#39;) # Need to account for base rates to look at absolute rate # q1_draws$dif_alpha &lt;- (inv.logit(q1_draws$`alpha[1]`) - # inv.logit(q1_draws$`alpha[2]`)) * 100 # mcmc_areas(q1_draws, regex_pars = &#39;dif_alpha&#39;) # We can look at relative rates though q1_discipline_draws$dif_alpha_rel &lt;- q1_discipline_draws$`alpha[1]` - q1_discipline_draws$`alpha[2]` mcmc_areas(q1_discipline_draws, regex_pars = &#39;dif_alpha_rel&#39;) What is your causal interpretation? If NWO’s goal is to equalize rates of funding between the genders, what type of intervention would be most effective? Investigate departmental levels, since once this is included the relative differences are small. "],["homework-week-7.html", "8 Homework: Week 7 8.1 Question 1 8.2 Question 2", " 8 Homework: Week 7 2021-09-07 [updated: 2021-10-07] 8.0.1 Data DT &lt;- data_trolley() precis(DT) ## mean sd 5.5% 94.5% histogram ## case NaN NA NA NA ## response 4.20 1.91 1 7 ▃▂▁▃▁▇▁▅▁▅▁▅ ## order 16.50 9.29 2 31 ▇▅▇▇▅▇▂ ## id NaN NA NA NA ## age 37.49 14.23 18 61 ▂▇▅▇▅▇▅▅▃▅▂▁▁ ## male 0.57 0.49 0 1 ▅▁▁▁▁▁▁▁▁▇ ## edu NaN NA NA NA ## action 0.43 0.50 0 1 ▇▁▁▁▁▁▁▁▁▅ ## intention 0.47 0.50 0 1 ▇▁▁▁▁▁▁▁▁▇ ## contact 0.20 0.40 0 1 ▇▁▁▁▁▁▁▁▁▂ ## story NaN NA NA NA ## action2 0.63 0.48 0 1 ▃▁▁▁▁▁▁▁▁▇ ## education 5.73 1.35 3 8 ▁▁▁▁▁▂▁▅▁▇▁▂▁▂ ## individual 166.00 95.56 19 313 ▇▇▇▇▇▇▅ Response: 1-7 integer, “how morally permissible the action to be taken (or not) is.” Categorical, ordered, but distances between categories is not metric or known. Logit = log-odds, cumulative logit = log-cumulative-odds. Both constrained between 0-1. Log-cumulative-odds for response 7 will be infinity since log(1/(1-1)) = infinity. Given this, we only need K-1 = 6 intercepts. 8.0.2 Model: ordered categorical outcome Probability of data: \\(R_{i} \\sim \\text{Ordered-logit}(\\phi_{i}, K)\\) Linear model: \\(\\phi_{i} = 0\\) Prior for each intercept: \\(K_{k} \\sim \\text{Normal}(0, 1.5)\\) writeLines(readLines(tar_read(stan_c_file_w07_model1))) ## data { ## int N; ## int K; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## } ## model { ## vector[N] phi; ## ## for (i in 1:N) { ## phi[i] = beta_action * action[i] + beta_contact * contact[i] + beta_intention * intention[i]; ## response[i] ~ ordered_logistic(phi[i], cutpoints); ## } ## ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 0.5); ## beta_contact ~ normal(0, 0.5); ## beta_intention ~ normal(0, 0.5); ## } model1_draws &lt;- tar_read(stan_c_mcmc_w07_model1)$draws() mcmc_areas(model1_draws, regex_pars = &#39;beta&#39;) Interactions writeLines(readLines(tar_read(stan_c_file_w07_model1_interactions))) ## data { ## int N; ## int K; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_intention_contact; ## real beta_intention_action; ## } ## model { ## vector[N] phi; ## ## for (i in 1:N) { ## phi[i] = beta_action * action[i] + beta_contact * contact[i] + beta_intention * intention[i] + beta_intention_contact * intention[i] * contact[i] + beta_intention_action * intention[i] * action[i] ## ; ## response[i] ~ ordered_logistic(phi[i], cutpoints); ## } ## ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 0.5); ## beta_contact ~ normal(0, 0.5); ## beta_intention ~ normal(0, 0.5); ## } model1_interactions_draws &lt;- tar_read(stan_c_mcmc_w07_model1_interactions)$draws() mcmc_areas(model1_interactions_draws, regex_pars = &#39;beta&#39;) mcmc_areas(model1_interactions_draws, regex_pars = &#39;cut&#39;, transformations = inv.logit) + xlim(0, 1) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. 8.0.3 Model: ordered categorical predictors Probability of data: \\(R_{i} \\sim \\text{Ordered-logit}(\\phi_{i}, K)\\) Linear model: \\(\\phi_{i} = \\beta_{E} \\sum_{j=0}^{E_{i}-1}\\delta_{j} + \\beta{A_{i}}A_{i} + \\beta{I_{i}}I_{i} + \\beta{C_{i}}C_{i}\\) Prior for each intercept: \\(K_{k} \\sim \\text{Normal}(0, 1.5)\\) Prior for each \\(\\beta\\): \\(\\beta_{A}, \\beta_{I}, \\beta_{C}, \\beta_{E}K_{k} \\sim \\text{Normal}(0, 1)\\) Prior for the \\(\\delta\\) vector: \\(\\delta \\sim \\text{Dirichlet}(\\alpha)\\) Dirichlet distribution = multivariate extension of the beta distribution. Probabilities between zero and one, that all sum to one. It is parameterized by pseudo-counts of observations. The intercept takes the first category, so we add 0 to the sequence of Make sure to reorder education levels writeLines(readLines(tar_read(stan_c_file_w07_model2))) ## data { ## int N; ## int K; ## int N_edu; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## int education[N]; ## vector[N_edu - 1] alpha; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_education; ## ## // Vector N reals that sum to 1 ## simplex[7] delta; ## } ## model { ## vector[N] phi; ## vector[N_edu] delta_j; ## ## delta ~ dirichlet(alpha); ## delta_j = append_row(0, delta); ## ## for (i in 1:N) { ## // add beta education * sum delta j, up to current i&#39;s education ## phi[i] = beta_education * sum(delta_j[1:education[i]]) + ## beta_action * action[i] + ## beta_contact * contact[i] + ## beta_intention * intention[i]; ## response[i] ~ ordered_logistic(phi[i], cutpoints); ## } ## ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 1); ## beta_contact ~ normal(0, 1); ## beta_intention ~ normal(0, 1); ## beta_education ~ normal(0, 1); ## } model2_draws &lt;- tar_read(stan_c_mcmc_w07_model2)$draws() mcmc_areas(model2_draws, regex_pars = &#39;beta&#39;) mcmc_areas(model2_draws, regex_pars = &#39;delta&#39;) mcmc_areas(model2_draws, regex_pars = &#39;cut&#39;, transformations = inv.logit) + xlim(0, 1) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. 8.1 Question 1 In the Trolley data — data(Trolley) — we saw how education level (modeled as an ordered category) is associated with responses. Is this association causal? One plausible confound is that education is also associated with age, through a causal process: People are older when they finish school than when they begin it. Reconsider the Trolley data in this light. Draw a DAG that represents hypothetical causal relationships among response, education, and age. dag &lt;- dagify( response ~ education + age + action + intention + contact, education ~ age, contact ~ action, exposure = &#39;education&#39;, outcome = &#39;response&#39; ) dag_plot(dag) adjustmentSets(dag, exposure = &#39;education&#39;, outcome = &#39;response&#39;, effect = &#39;total&#39; ) ## { age } Which statistical model or models do you need to evaluate the causal influence of education on responses? Fit these models to the trolley data. What do you conclude about the causal relationships among these three variables? writeLines(readLines(tar_read(stan_c_file_w07_model2_age))) ## data { ## int N; ## int K; ## int N_edu; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## int education[N]; ## real age[N]; ## vector[N_edu - 1] alpha; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_education; ## real beta_age; ## ## // Vector N reals that sum to 1 ## simplex[7] delta; ## } ## model { ## vector[N] phi; ## vector[N_edu] delta_j; ## ## delta ~ dirichlet(alpha); ## delta_j = append_row(0, delta); ## ## for (i in 1:N) { ## // add beta education * sum delta j, up to current i&#39;s education ## phi[i] = beta_education * sum(delta_j[1:education[i]]) + ## beta_action * action[i] + ## beta_contact * contact[i] + ## beta_age * age[i] + ## beta_intention * intention[i]; ## response[i] ~ ordered_logistic(phi[i], cutpoints); ## } ## ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 1); ## beta_contact ~ normal(0, 1); ## beta_intention ~ normal(0, 1); ## beta_education ~ normal(0, 1); ## beta_age ~ normal(0, 1); ## } model2_age_draws &lt;- tar_read(stan_c_mcmc_w07_model2_age)$draws() mcmc_areas(model2_age_draws, regex_pars = &#39;beta&#39;) mcmc_areas(model2_age_draws, regex_pars = &#39;delta&#39;) mcmc_areas(model2_age_draws, regex_pars = &#39;cut&#39;, transformations = inv.logit) + xlim(0, 1) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. 8.2 Question 2 Consider one more variable in the Trolley data: Gender. Suppose that gender might influence education as well as response directly. Draw the DAG now that includes response, education, age, and gender. Using only the DAG, is it possible that the inferences from Problem 1 are con founded by gender? If so, define any additional models you need to infer the causal influence of education on response. What do you conclude? dag &lt;- dagify( response ~ education + age + gender + action + intention + contact, education ~ age, education ~ gender, contact ~ action, exposure = &#39;education&#39;, outcome = &#39;response&#39; ) dag_plot(dag) adjustmentSets(dag, exposure = &#39;education&#39;, outcome = &#39;response&#39;, effect = &#39;total&#39; ) ## { age, gender } writeLines(readLines(tar_read(stan_c_file_w07_model2_gender))) ## data { ## int N; ## int K; ## int N_edu; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## int education[N]; ## real age[N]; ## int gender[N]; ## vector[N_edu - 1] alpha; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_education; ## real beta_age; ## real beta_gender; ## ## // Vector N reals that sum to 1 ## simplex[7] delta; ## } ## model { ## vector[N] phi; ## vector[N_edu] delta_j; ## ## delta ~ dirichlet(alpha); ## delta_j = append_row(0, delta); ## ## for (i in 1:N) { ## // add beta education * sum delta j, up to current i&#39;s education ## phi[i] = beta_education * sum(delta_j[1:education[i]]) + ## beta_action * action[i] + ## beta_contact * contact[i] + ## beta_age * age[i] + ## beta_gender * gender[i] + ## beta_intention * intention[i]; ## response[i] ~ ordered_logistic(phi[i], cutpoints); ## } ## ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 1); ## beta_contact ~ normal(0, 1); ## beta_intention ~ normal(0, 1); ## beta_education ~ normal(0, 1); ## beta_age ~ normal(0, 1); ## beta_gender ~ normal(0, 1); ## } model2_gender_draws &lt;- tar_read(stan_c_mcmc_w07_model2_gender)$draws() mcmc_areas(model2_gender_draws, regex_pars = &#39;beta&#39;) mcmc_areas(model2_gender_draws, regex_pars = &#39;delta&#39;) mcmc_areas(model2_gender_draws, regex_pars = &#39;cut&#39;, transformations = inv.logit) + xlim(0, 1) ## Scale for &#39;x&#39; is already present. Adding another scale for &#39;x&#39;, which will ## replace the existing scale. "],["homework-week-8.html", "9 Homework: Week 8 9.1 Question 1 9.2 Question 2 9.3 Question 3", " 9 Homework: Week 8 2021-09-08 [updated: 2021-10-07] 9.1 Question 1 9.1.1 Data DT &lt;- data_reedfrogs() precis(DT) ## mean sd 5.5% 94.5% histogram ## density 23.33 10.38 10.00 35 ▇▁▁▁▁▁▁▇▁▁▁▁▇ ## pred NaN NA NA NA ## size NaN NA NA NA ## surv 16.31 9.88 4.58 33 ▂▇▂▁▃▁▃ ## propsurv 0.72 0.27 0.29 1 ▁▁▃▁▁▂▁▅▇ writeLines(readLines(tar_read(stan_d_file_w08_model_frogs_1))) ## data { ## int N; ## int survival[N]; ## int density[N]; ## int tank[N]; ## } ## parameters { ## real sigma; ## real alpha[N]; ## real alpha_bar; ## } ## transformed parameters { ## vector[N] p; ## ## for (i in 1:N) { ## p[i] = inv_logit(alpha[i]); ## } ## } ## model { ## alpha_bar ~ normal(0, 0.25); ## alpha ~ normal(alpha_bar, sigma); ## sigma ~ exponential(1); ## for (i in 1:N) { ## survival[i] ~ binomial(density[i], p[i]); ## } ## } model_frogs_1_draws &lt;- tar_read(stan_d_mcmc_w08_model_frogs_1)$draws() mcmc_areas(model_frogs_1_draws, regex_pars = &#39;alpha&#39;) mcmc_areas(model_frogs_1_draws, regex_pars = &#39;p\\\\[&#39;) writeLines(readLines(tar_read(stan_d_file_w08_model_frogs_2))) ## data { ## int N; ## int survival[N]; ## int density[N]; ## int tank[N]; ## int predation[N]; ## } ## parameters { ## real sigma; ## real alpha[N]; ## real alpha_bar; ## real beta_predation; ## } ## transformed parameters { ## vector[N] p; ## ## for (i in 1:N) { ## p[i] = inv_logit(alpha[i] + beta_predation * predation[i]); ## } ## } ## model { ## alpha_bar ~ normal(0, 0.25); ## alpha ~ normal(alpha_bar, sigma); ## beta_predation ~ normal(0, 0.5); ## sigma ~ exponential(1); ## for (i in 1:N) { ## survival[i] ~ binomial(density[i], p[i]); ## } ## } model_frogs_2_draws &lt;- tar_read(stan_d_mcmc_w08_model_frogs_2)$draws() mcmc_areas(model_frogs_2_draws, regex_pars = &#39;predation&#39;) writeLines(readLines(tar_read(stan_d_file_w08_model_frogs_3))) ## data { ## int N; ## int survival[N]; ## int density[N]; ## int tank[N]; ## int size[N]; ## } ## parameters { ## real sigma; ## real alpha[N]; ## real alpha_bar; ## real beta_size; ## } ## transformed parameters { ## vector[N] p; ## ## for (i in 1:N) { ## p[i] = inv_logit(alpha[i] + beta_size * size[i]); ## } ## } ## model { ## alpha_bar ~ normal(0, 0.25); ## alpha ~ normal(alpha_bar, sigma); ## beta_size ~ normal(0, 0.5); ## sigma ~ exponential(1); ## for (i in 1:N) { ## survival[i] ~ binomial(density[i], p[i]); ## } ## } model_frogs_3_draws &lt;- tar_read(stan_d_mcmc_w08_model_frogs_3)$draws() mcmc_areas(model_frogs_3_draws, regex_pars = &#39;size&#39;) writeLines(readLines(tar_read(stan_d_file_w08_model_frogs_4))) ## data { ## int N; ## int survival[N]; ## int density[N]; ## int tank[N]; ## int size[N]; ## int predation[N]; ## } ## parameters { ## real sigma; ## real alpha[N]; ## real alpha_bar; ## real beta_size; ## real beta_predation; ## real beta_interaction; ## } ## transformed parameters { ## vector[N] p; ## ## for (i in 1:N) { ## p[i] = inv_logit(alpha[i] + beta_size * size[i] + beta_predation * predation[i] + beta_interaction * (size[i] * predation[i])); ## } ## } ## model { ## alpha_bar ~ normal(0, 0.25); ## alpha ~ normal(alpha_bar, sigma); ## beta_size ~ normal(0, 0.5); ## beta_predation ~ normal(0, 0.5); ## beta_interaction ~ normal(0, 0.25); ## sigma ~ exponential(1); ## for (i in 1:N) { ## survival[i] ~ binomial(density[i], p[i]); ## } ## } model_frogs_4_draws &lt;- tar_read(stan_d_mcmc_w08_model_frogs_4)$draws() mcmc_areas(model_frogs_4_draws, regex_pars = &#39;beta&#39;) Negative influence of predation is somewhat balanced by size of tank. 9.2 Question 2 In 1980, a typical Bengali woman could have 5 or more children in her lifetime. By the year 2000, a typical Bengali woman had only 2 or 3. You’re going to look at a historical set of data, when contraception was widely available but many families chose not to use it. These data reside in data(bangladesh) and come from the 1988 Bangladesh Fertility Survey. Each row is one of 1934 women. There are six variables, but you can focus on two of them for this practice problem: (1) district: ID number of administrative district each woman resided in (2) use.contraception: An indicator (0/1) of whether the woman was using contraception. DT &lt;- data_bangladesh() precis(DT) ## mean sd 5.5% 94.5% histogram ## woman 967.500000000000000000 558.44 107.3 1827.7 ▇▇▇▇▇▇▇▇▇▅ ## district 29.252843846949328821 17.80 1.0 57.0 ▇▅▇▅▅▇▅▃▅▅▅▅ ## use.contraception 0.392450879007238906 0.49 0.0 1.0 ▇▁▁▁▁▁▁▁▁▅ ## living.children 2.652016546018614473 1.24 1.0 4.0 ▅▃▁▃▁▇ ## age.centered 0.002197880041365139 9.01 -12.6 16.4 ▅▇▇▅▃▃▂ ## urban 0.290589451913133401 0.45 0.0 1.0 ▇▁▁▁▁▁▁▁▁▃ ## id 967.500000000000000000 558.44 107.3 1827.7 ▇▇▇▇▇▇▇▇▇▅ ## contraception 0.392450879007238906 0.49 0.0 1.0 ▇▁▁▁▁▁▁▁▁▅ ## scale_age 0.000000000000000014 1.00 -1.4 1.8 ▁▇▇▅▇▃▃▂▁ Now, focus on predicting use.contraception, clustered by district_id. Fit both (1) a traditional fixed-effects model that uses an index variable for district and (2) a multilevel model with varying intercepts for district. Plot the predicted proportions of women in each district using contraception, for both the fixed-effects model and the varying-effects model. That is, make a plot in which district ID is on the horizontal axis and expected proportion using contraception is on the vertical.Make one plot for each model, or layer them on the same plot, as you prefer. How do the models disagree? Can you explain the pattern of disagreement? In particular, can you explain the most extreme cases of disagreement, both why they happen where they do and why the models reach different inferences? Fixed effects model writeLines(readLines(tar_read(stan_e_file_w08_model_bang_fixed))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // District and contraception, expecting integers of length N ## int district[N]; ## int contraception[N]; ## } ## parameters { ## // Alpha vector matching length of number of districts ## vector[N_district] alpha; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // Alpha is distributed normally ## alpha ~ normal(0, 1.5); ## ## // For each for in data, alpha for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]]); ## } ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_bang_fixed_draws &lt;- tar_read(stan_e_mcmc_w08_model_bang_fixed)$draws() mcmc_areas(model_bang_fixed_draws, regex_pars = &#39;alpha&#39;, transformations = inv.logit) Multilevel model writeLines(readLines(tar_read(stan_e_file_w08_model_bang_multi))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // District and contraception, expecting integers of length N ## int district[N]; ## int contraception[N]; ## } ## parameters { ## // Alpha vector matching length of number of districts ## vector[N_district] alpha; ## real&lt;lower=0&gt; sigma; ## ## // Hyper parameter alpha bar ## real alpha_bar; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // For each for in data, alpha for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]]); ## } ## ## // Hyper priors: alpha bar and sigma ## alpha_bar ~ normal(0, 1.5); ## sigma ~ exponential(1); ## ## // Priors ## // Alpha is distributed normally ## alpha ~ normal(alpha_bar, sigma); ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_bang_multi_draws &lt;- tar_read(stan_e_mcmc_w08_model_bang_multi)$draws() mcmc_trace(model_bang_multi_draws) mcmc_areas(model_bang_multi_draws, regex_pars = &#39;alpha&#39;, transformations = inv.logit) mcmc_areas(model_bang_multi_draws, pars = c(&#39;alpha_bar&#39;, &#39;sigma&#39;)) Comparison (mcmc_areas(model_bang_fixed_draws, regex_pars = &#39;alpha&#39;, transformations = inv.logit) + labs(title = &#39;fixed&#39;)) + (mcmc_areas(model_bang_multi_draws, regex_pars = &#39;alpha\\\\[&#39;, transformations = inv.logit) + labs(title = &#39;multilevel&#39;)) setDT(model_bang_fixed_draws) setDT(model_bang_multi_draws) compare &lt;- rbindlist(list( melt(model_bang_fixed_draws, measure.vars = patterns(&#39;alpha&#39;))[, model_type := &#39;fixed&#39;], melt(model_bang_multi_draws, measure.vars = patterns(&#39;alpha&#39;))[, model_type := &#39;multilevel&#39;] ), fill = TRUE) compare[, variable := as.integer(gsub(&#39;alpha\\\\[|\\\\]&#39;, &#39;&#39;, variable))] ## Warning in eval(jsub, SDenv, parent.frame()): NAs introduced by coercion ggplot(compare[, .(value = mean(value)), .(variable, model_type)]) + geom_hline(yintercept = 0, alpha = 0.5) + geom_point(aes(variable, value, color = model_type)) + geom_line(aes(variable, value, group = model_type), alpha = 0.2) + scale_color_viridis_d(begin = 0.3, end = 0.8) + labs(x = &#39;district&#39;, y = &#39;alpha&#39;) ## Warning: Removed 1 rows containing missing values (geom_point). ## Warning: Removed 1 row(s) containing missing values (geom_path). 9.3 Question 3 Return to the Trolley data, data(Trolley), from Chapter 12. Define and fit a varying intercepts model for these data. By this I mean to add an intercept parameter for the individual to the linear model. Cluster the varying intercepts on individual participants, as indicated by the unique values in the id variable. Include action, intention, and contact as before. Compare the varying intercepts model and a model that ignores individuals, using both WAIC/LOO and posterior predictions. What is the impact of individual variation in these data? DT &lt;- data_trolley() precis(DT) ## mean sd 5.5% 94.5% histogram ## case NaN NA NA NA ## response 4.20 1.91 1 7 ▃▂▁▃▁▇▁▅▁▅▁▅ ## order 16.50 9.29 2 31 ▇▅▇▇▅▇▂ ## id NaN NA NA NA ## age 37.49 14.23 18 61 ▂▇▅▇▅▇▅▅▃▅▂▁▁ ## male 0.57 0.49 0 1 ▅▁▁▁▁▁▁▁▁▇ ## edu NaN NA NA NA ## action 0.43 0.50 0 1 ▇▁▁▁▁▁▁▁▁▅ ## intention 0.47 0.50 0 1 ▇▁▁▁▁▁▁▁▁▇ ## contact 0.20 0.40 0 1 ▇▁▁▁▁▁▁▁▁▂ ## story NaN NA NA NA ## action2 0.63 0.48 0 1 ▃▁▁▁▁▁▁▁▁▇ ## education 5.73 1.35 3 8 ▁▁▁▁▁▂▁▅▁▇▁▂▁▂ ## individual 166.00 95.56 19 313 ▇▇▇▇▇▇▅ writeLines(readLines(tar_read(stan_c_file_w08_model_trolley))) ## data { ## int N; ## int K; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_intention_contact; ## real beta_intention_action; ## } ## transformed parameters { ## vector[N] phi; ## ## for (i in 1:N) { ## phi[i] = beta_action * action[i] + beta_contact * contact[i] + beta_intention * intention[i] + beta_intention_contact * intention[i] * contact[i] + beta_intention_action * intention[i] * action[i]; ## } ## } ## model { ## response ~ ordered_logistic(phi, cutpoints); ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 0.5); ## beta_contact ~ normal(0, 0.5); ## beta_intention ~ normal(0, 0.5); ## } ## generated quantities { ## vector[N] log_lik; ## for (i in 1:N) { ## log_lik[i] = ordered_logistic_lpmf(response[i] | phi[i], cutpoints); ## } ## } model_trolley &lt;- tar_read(stan_c_mcmc_w08_model_trolley) model_trolley_draws &lt;- model_trolley$draws() mcmc_areas(model_trolley_draws, regex_pars = &#39;cutpoints&#39;) mcmc_areas(model_trolley_draws, regex_pars = &#39;beta&#39;) options(cmdstanr_draws_format = &quot;draws_array&quot;) model_trolley_loo &lt;- model_trolley$loo() options(cmdstanr_draws_format = &quot;draws_df&quot;) writeLines(readLines(tar_read(stan_c_file_w08_model_trolley_multi))) ## data { ## int N; ## int K; ## int response[N]; ## int action[N]; ## int intention[N]; ## int contact[N]; ## int individual[N]; ## int N_individual; ## } ## parameters { ## // Cut points are the positions of responses along cumulative odds ## ordered[K] cutpoints; ## real beta_action; ## real beta_intention; ## real beta_contact; ## real beta_intention_contact; ## real beta_intention_action; ## real alpha_bar; ## real sigma; ## vector[N_individual] alpha; ## } ## transformed parameters { ## vector[N] phi; ## ## for (i in 1:N) { ## phi[i] = alpha[individual[i]] + beta_action * action[i] + ## beta_contact * contact[i] + beta_intention * intention[i] + ## beta_intention_contact * intention[i] * contact[i] + ## beta_intention_action * intention[i] * action[i]; ## } ## } ## model { ## // Hyper parameter priors ## alpha_bar ~ normal(0, 1.5); ## sigma ~ exponential(1); ## ## // Priors ## alpha ~ normal(alpha_bar, sigma); ## ## response ~ ordered_logistic(phi, cutpoints); ## cutpoints ~ normal(0, 1.5); ## beta_action ~ normal(0, 0.5); ## beta_contact ~ normal(0, 0.5); ## beta_intention ~ normal(0, 0.5); ## } ## generated quantities { ## vector[N] log_lik; ## for (i in 1:N) { ## log_lik[i] = ordered_logistic_lpmf(response[i] | phi[i], cutpoints); ## } ## } model_trolley_multi &lt;- tar_read(stan_c_mcmc_w08_model_trolley_multi) model_trolley_multi_draws &lt;- model_trolley_multi$draws() mcmc_areas(model_trolley_multi_draws, regex_pars = &#39;cutpoints&#39;) mcmc_areas(model_trolley_multi_draws, regex_pars = &#39;beta&#39;) options(cmdstanr_draws_format = &quot;draws_array&quot;) model_trolley_multi_loo &lt;- model_trolley_multi$loo() options(cmdstanr_draws_format = &quot;draws_df&quot;) col_patterns &lt;- &#39;^beta|^alpha|^sigma|^cutpoints&#39; setDT(model_trolley_draws) setDT(model_trolley_multi_draws) precis(model_trolley_draws[, .SD, .SDcols = patterns(col_patterns)]) ## 6 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% histogram ## beta_action -0.46 0.055 -0.54 -0.37 ▁▁▁▃▇▇▂▁▁▁ ## beta_intention -0.27 0.058 -0.36 -0.18 ▁▁▁▅▇▅▂▁▁▁ ## beta_contact -0.32 0.069 -0.43 -0.21 ▁▁▁▂▅▇▇▃▁▁▁ ## beta_intention_contact -1.29 0.097 -1.44 -1.13 ▁▁▁▁▃▅▇▇▇▃▂▁▁▁▁ ## beta_intention_action -0.46 0.081 -0.59 -0.34 ▁▁▁▁▃▅▇▇▅▂▁▁▁ precis(model_trolley_multi_draws[, .SD, .SDcols = patterns(col_patterns)]) ## 337 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% histogram ## beta_action -0.63 0.056 -0.72 -0.54 ▁▁▂▇▇▅▁▁▁ ## beta_intention -0.36 0.060 -0.45 -0.26 ▁▁▁▃▇▇▃▁▁▁ ## beta_contact -0.42 0.072 -0.54 -0.30 ▁▁▁▂▇▇▇▃▁▁▁ ## beta_intention_contact -1.74 0.101 -1.91 -1.58 ▁▁▁▃▇▅▁▁▁ ## beta_intention_action -0.60 0.082 -0.73 -0.46 ▁▁▁▁▂▅▇▇▅▂▁▁▁ ## alpha_bar 1.01 0.437 0.26 1.72 ▁▁▁▂▂▂▇▇▅▂▂▁▁ ## sigma 1.92 0.082 1.80 2.06 ▁▁▁▁▃▇▇▅▃▁▁▁▁▁ compared &lt;- loo_compare(model_trolley_loo, model_trolley_multi_loo) print(compared, simplify = FALSE) ## elpd_diff se_diff elpd_loo se_elpd_loo p_loo se_p_loo looic ## model2 0.0 0.0 -15529.0 89.8 356.8 4.7 31058.0 ## model1 -2935.7 86.8 -18464.7 40.5 11.1 0.1 36929.5 ## se_looic ## model2 179.6 ## model1 81.1 "],["homework-week-9.html", "10 Homework: Week 9 10.1 Question 1 10.2 Question 2 10.3 Question 3", " 10 Homework: Week 9 2021-09-14 [updated: 2021-10-07] 10.1 Question 1 Revisit the Bangladesh fertility data, data(bangladesh). Fit a model with both varying intercepts by district_id and varying slopes of urban (as a 0/1 indicator variable) by district_id. You are still predicting use.contraception. Inspect the correlation between the intercepts and slopes. Can you interpret this correlation, in terms of what it tells you about the pattern of contraceptive use in the sample? It might help to plot the varying effect estimates for both the intercepts and slopes, by district. Then you can visualize the correlation and maybe more easily think through what it means to have a particular correlation. Plotting predicted proportion of women using contraception, in each district, with urban women on one axis and rural on the other, might also help. precis(DT) ## mean sd 5.5% 94.5% histogram ## case NaN NA NA NA ## response 4.20 1.91 1 7 ▃▂▁▃▁▇▁▅▁▅▁▅ ## order 16.50 9.29 2 31 ▇▅▇▇▅▇▂ ## id NaN NA NA NA ## age 37.49 14.23 18 61 ▂▇▅▇▅▇▅▅▃▅▂▁▁ ## male 0.57 0.49 0 1 ▅▁▁▁▁▁▁▁▁▇ ## edu NaN NA NA NA ## action 0.43 0.50 0 1 ▇▁▁▁▁▁▁▁▁▅ ## intention 0.47 0.50 0 1 ▇▁▁▁▁▁▁▁▁▇ ## contact 0.20 0.40 0 1 ▇▁▁▁▁▁▁▁▁▂ ## story NaN NA NA NA ## action2 0.63 0.48 0 1 ▃▁▁▁▁▁▁▁▁▇ ## education 5.73 1.35 3 8 ▁▁▁▁▁▂▁▅▁▇▁▂▁▂ ## individual 166.00 95.56 19 313 ▇▇▇▇▇▇▅ writeLines(readLines(tar_read(stan_e_file_w09_model_q1))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // District, contraception and urban, expecting integers of length N ## int district[N]; ## int contraception[N]; ## int urban[N]; ## } ## parameters { ## // Alpha and beta urban vectors matching length of number of districts ## vector[N_district] alpha; ## ## // Beta urban vector matching length of number of districts ## vector[N_district] beta; ## ## // Hyper parameter alpha bar, beta bar ## real alpha_bar; ## real beta_bar; ## ## // Correlation matrix, sigma ## // 2 represents the number of predictors ## corr_matrix[2] Rho; ## vector&lt;lower=0&gt;[2] sigma; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // Hyper priors: alpha bar, beta urban bar, sigma and Rho ## alpha_bar ~ normal(0, 1); ## beta_bar ~ normal(0, 0.5); ## sigma ~ exponential(1); ## Rho ~ lkj_corr(2); ## ## // Multivariate normal ## { ## vector[2] YY[N_district]; ## vector[2] MU; ## MU = [alpha_bar, beta_bar]&#39;; ## for (j in 1:N_district) { ## YY[j] = [alpha[j], beta[j]]&#39;; ## } ## YY ~ multi_normal(MU, quad_form_diag(Rho, sigma)); ## } ## ## // For each for in data, alpha and beta for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]] + beta[district[i]] * urban[i]); ## } ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_q1_draws &lt;- tar_read(stan_e_mcmc_w09_model_q1)$draws() mcmc_areas(model_q1_draws, regex_pars = &#39;alpha&#39;) mcmc_areas(model_q1_draws, regex_pars = &#39;beta&#39;) mcmc_areas(model_q1_draws, regex_pars = &#39;bar&#39;) mcmc_areas(model_q1_draws, regex_pars = &#39;Rho&#39;) setDT(model_q1_draws) precis(model_q1_draws[, .SD, .SDcols = patterns(&#39;*bar&#39;)]) ## mean sd 5.5% 94.5% histogram ## alpha_bar -0.69 0.10 -0.85 -0.53 ▁▁▁▂▇▇▃▁▁ ## beta_bar 0.64 0.16 0.38 0.90 ▁▁▁▂▃▇▇▅▃▁▁▁ precis(model_q1_draws[, .SD, .SDcols = patterns(&#39;Rho|sigma&#39;)], depth = 3) ## mean sd 5.5% 94.5% histogram ## Rho[1,1] 1.00 0.000 1.00 1.00 ▇ ## Rho[2,1] -0.65 0.168 -0.86 -0.34 ▂▇▃▁▁▁▁▁ ## Rho[1,2] -0.65 0.168 -0.86 -0.34 ▂▇▃▁▁▁▁▁ ## Rho[2,2] 1.00 0.000 1.00 1.00 ▇ ## sigma[1] 0.57 0.096 0.43 0.74 ▁▁▁▂▅▇▇▇▃▂▁▁▁▁ ## sigma[2] 0.77 0.207 0.46 1.10 ▁▁▃▇▅▂▁▁▁ mcmc_hex(model_q1_draws, regex_pars = &#39;*bar&#39;) 10.2 Question 2 Now consider the predictor variables age.centered and living.children, also contained in data(bangladesh). Suppose that age influences contraceptive use (changing attitudes) and number of children (older people have had more time to have kids). Number of children may also directly influence contraceptive use. Draw a DAG that reflects these hypothetical relationships. Then build models needed to evaluate the DAG. You will need at least two models. Retain district and urban, as in Problem 1. What do you conclude about the causal influence of age and children? dag &lt;- dagify( contraceptive_use ~ age + number_children, number_children ~ age, exposure = &#39;age&#39;, outcome = &#39;contraceptive_use&#39; ) dag_plot(dag) adjustmentSets(dag, exposure = &#39;age&#39;, outcome = &#39;contraceptive_use&#39;, effect = &#39;total&#39;) ## {} adjustmentSets(dag, exposure = &#39;age&#39;, outcome = &#39;contraceptive_use&#39;, effect = &#39;direct&#39;) ## { number_children } writeLines(readLines(tar_read(stan_e_file_w09_model_q2_a))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // District, contraception and urban, expecting integers of length N ## int district[N]; ## int contraception[N]; ## int urban[N]; ## ## // Also scale_age ## real scale_age[N]; ## } ## parameters { ## // Alpha and beta urban vectors matching length of number of districts ## vector[N_district] alpha; ## ## // Beta urban vector matching length of number of districts ## vector[N_district] beta; ## ## // Hyper parameter alpha bar, beta bar ## real alpha_bar; ## real beta_bar; ## ## // scale_age ## real beta_scale_age; ## ## // Correlation matrix, sigma ## // 2 represents the number of predictors ## corr_matrix[2] Rho; ## vector&lt;lower=0&gt;[2] sigma; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // Hyper priors: alpha bar, beta urban bar, sigma and Rho ## alpha_bar ~ normal(0, 1); ## beta_bar ~ normal(0, 0.5); ## sigma ~ exponential(1); ## Rho ~ lkj_corr(2); ## ## // Multivariate normal ## { ## vector[2] YY[N_district]; ## vector[2] MU; ## MU = [alpha_bar, beta_bar]&#39;; ## for (j in 1:N_district) { ## YY[j] = [alpha[j], beta[j]]&#39;; ## } ## YY ~ multi_normal(MU, quad_form_diag(Rho, sigma)); ## } ## ## // Beta scale_age prior ## beta_scale_age ~ normal(0, 1.5); ## ## // For each for in data, alpha and beta for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]] + beta[district[i]] * urban[i] + beta_scale_age * scale_age[i]); ## } ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_q2_a_draws &lt;- tar_read(stan_e_mcmc_w09_model_q2_a)$draws() setDT(model_q2_a_draws) writeLines(readLines(tar_read(stan_e_file_w09_model_q2_b))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // District, contraception and urban, expecting integers of length N ## int district[N]; ## int contraception[N]; ## int urban[N]; ## ## // Also scale_age and n_children ## real scale_age[N]; ## int n_children[N]; ## } ## parameters { ## // Alpha and beta urban vectors matching length of number of districts ## vector[N_district] alpha; ## ## // Beta urban vector matching length of number of districts ## vector[N_district] beta; ## ## // Hyper parameter alpha bar, beta bar ## real alpha_bar; ## real beta_bar; ## ## // scale_age and n_children ## real beta_scale_age; ## real beta_children; ## ## // Correlation matrix, sigma ## // 2 represents the number of predictors ## corr_matrix[2] Rho; ## vector&lt;lower=0&gt;[2] sigma; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // Hyper priors: alpha bar, beta urban bar, sigma and Rho ## alpha_bar ~ normal(0, 1); ## beta_bar ~ normal(0, 0.5); ## sigma ~ exponential(1); ## Rho ~ lkj_corr(2); ## ## // Multivariate normal ## { ## vector[2] YY[N_district]; ## vector[2] MU; ## MU = [alpha_bar, beta_bar]&#39;; ## for (j in 1:N_district) { ## YY[j] = [alpha[j], beta[j]]&#39;; ## } ## YY ~ multi_normal(MU, quad_form_diag(Rho, sigma)); ## } ## ## // Beta scale_age prior ## beta_scale_age ~ normal(0, 1.5); ## beta_children ~ normal(0, 1.5); ## ## // For each for in data, alpha and beta for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]] + beta[district[i]] * urban[i] + beta_scale_age * scale_age[i] + beta_children * n_children[i]); ## } ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_q2_b_draws &lt;- tar_read(stan_e_mcmc_w09_model_q2_b)$draws() setDT(model_q2_b_draws) precis(model_q2_a_draws[, .SD, .SDcols = patterns(&#39;beta&#39;)]) ## 60 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% histogram ## beta_bar 0.643 0.16 0.3844 0.90 ▁▁▁▁▃▇▇▅▃▁▁▁▁▁ ## beta_scale_age 0.084 0.05 0.0057 0.16 ▁▁▃▇▅▂▁▁ precis(model_q2_b_draws[, .SD, .SDcols = patterns(&#39;beta&#39;)]) ## 60 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% histogram ## beta_bar 0.68 0.163 0.42 0.93 ▁▁▁▁▃▅▇▇▃▂▁▁▁ ## beta_scale_age -0.26 0.071 -0.38 -0.15 ▁▁▁▁▂▅▇▇▃▁▁▁ ## beta_children 0.41 0.060 0.32 0.51 ▁▁▃▇▇▃▁▁▁ 10.3 Question 3 Modify any models from Problem 2 that contained that children variable and model the variable now as a monotonic ordered category, like education from the week we did ordered categories. Education in that example had 8 categories. Children here will have fewer (no one in the sample had 8 children). So modify the code appropriately. What do you conclude about the causal influence of each additional child on use of contraception? writeLines(readLines(tar_read(stan_e_file_w09_model_q3))) ## data { ## // Integers for number of rows, and number of districts ## int&lt;lower=0&gt; N; ## int&lt;lower=0&gt; N_district; ## ## // K categories ## int K; ## vector[K] alpha_k; ## ## // District, contraception and urban, expecting integers of length N ## int district[N]; ## int contraception[N]; ## int urban[N]; ## ## // Also scale_age, n_children ## real scale_age[N]; ## int n_children[N]; ## } ## parameters { ## // Alpha and beta urban vectors matching length of number of districts ## vector[N_district] alpha; ## ## // Beta urban vector matching length of number of districts ## vector[N_district] beta; ## ## // Hyper parameter alpha bar, beta bar ## real alpha_bar; ## real beta_bar; ## ## // scale_age and n_children ## real beta_scale_age; ## real beta_children; ## ## // Correlation matrix, sigma ## // 2 represents the number of predictors ## corr_matrix[2] Rho; ## vector&lt;lower=0&gt;[2] sigma; ## ## simplex[3] delta; ## } ## model { ## // p vector matching length of number of districts ## vector[N] p; ## ## // Hyper priors: alpha bar, beta urban bar, sigma and Rho ## alpha_bar ~ normal(0, 1); ## beta_bar ~ normal(0, 0.5); ## sigma ~ exponential(1); ## Rho ~ lkj_corr(2); ## ## // ## vector[K] delta_shell; ## delta ~ dirichlet(alpha_k); ## delta_shell = append_row(0, delta); ## ## // Multivariate normal ## { ## vector[2] YY[N_district]; ## vector[2] MU; ## MU = [alpha_bar, beta_bar]&#39;; ## for (j in 1:N_district) { ## YY[j] = [alpha[j], beta[j]]&#39;; ## } ## YY ~ multi_normal(MU, quad_form_diag(Rho, sigma)); ## } ## ## // Beta scale_age prior ## beta_scale_age ~ normal(0, 1.5); ## beta_children ~ normal(0, 1.5); ## ## // For each for in data, alpha and beta for that row&#39;s district ## for (i in 1:N) { ## p[i] = inv_logit(alpha[district[i]] + beta[district[i]] * urban[i] + beta_scale_age * scale_age[i] + beta_children * sum(delta_shell[1:n_children[i]]) * n_children[i]); ## } ## ## // Contraception if distributed with bernoulli, p ## contraception ~ bernoulli(p); ## } model_q3_draws &lt;- tar_read(stan_e_mcmc_w09_model_q3)$draws() setDT(model_q3_draws) precis(model_q3_draws[, .SD, .SDcols = patterns(&#39;beta&#39;)]) ## 60 vector or matrix parameters hidden. Use depth=2 to show them. ## mean sd 5.5% 94.5% histogram ## beta_bar 0.69 0.160 0.44 0.94 ▁▁▁▁▂▅▇▇▅▂▁▁▁▁ ## beta_scale_age -0.29 0.072 -0.40 -0.17 ▁▁▁▁▃▇▇▅▂▁▁▁ ## beta_children 0.34 0.046 0.26 0.41 ▁▁▃▇▇▂▁▁ precis(model_q3_draws[, .SD, .SDcols = patterns(&#39;delta&#39;)], 3) ## mean sd 5.5% 94.5% histogram ## delta[1] 0.842 0.079 0.70 0.95 ▁▁▁▁▁▁▁▁▂▃▇▇▅▁ ## delta[2] 0.102 0.069 0.02 0.23 ▅▇▅▂▁▁▁▁▁▁▁ ## delta[3] 0.056 0.039 0.01 0.13 ▇▅▁▁▁▁▁ mcmc_areas(model_q3_draws, regex_pars = &#39;delta&#39;) "],["lecture-01.html", "11 Lecture 01 11.1 Hypotheses - Process Models - Statistical Models 11.2 Small world / large world 11.3 Example: four marbles 11.4 Building a model", " 11 Lecture 01 11.0.1 Popper generate meaningful (not null) hypotheses and predictions and falsify those 11.0.2 Approach A framework for developing + using statistical golems Bayesian data analysis uses probability to describe uncertainty “count all the ways data can happen, according to assumptions and the assumptions with more ways consistent with the data are more plausible” Multilevel models Models within models Avoids averaging … Model comparison Compare meaningful (not null) models Caution: over fitting 11.1 Hypotheses - Process Models - Statistical Models Any statistical model M can correspond to multiple process models Any hypothesis H may correspond to multiple process models Any statistical model may correspond to multiple hypothesis Untitled 11.2 Small world / large world Small world: models have assumptions, Bayesian models fit optimally Large world: real world, no guarantee of optimality 11.3 Example: four marbles Setup 4 marbles, either black or white, with replacement Possibilities (5) therefore: WWWW, BWWW, BBWW, BBBW, BBBB Observation: BWB Calculate Given 3 observations, there are 4 choices, for a total of 64 possibilities Given we observed both a white and a black marble, possibilities WWWW and BBBB are not valid At each branch, there are 3 possibilities it can be white and 1 possibility it can be black Bayesian is additive, at each branch just sum the possibility BWWW: 3 = 1 * 3 * 1 BBWW: 8 = 2 * 2 * 2 BBBW: 9 = 3 * 1 * 3 Using new information New information is directly integrated into the old information, therefore just multiply it through So if we take another measure of B, multiply the property through BWWW: 3 * 1 = 3 BBWW: 8 * 2 = 16 BBBW: 9 * 3 = 27 Using other information Factory says B measures are rare, but minimum of 1 per bag Factory info WWWW 0 since we observed a B BWWW: 3 BBWW: 2 BBBW: 1 BBBB 0 since we observed a W Multiply it through BWWW: 3 * 3 = 9 BBWW: 16 * 2 = 32 BBBW: 1 * 27 = 27 Counts get huge - therefore we normalize them giving us probabilities (0-1) Probability theory is just normalized counting 11.4 Building a model Design the model Condition on the data Evaluate, critique the model (Restart) "],["lecture-02.html", "12 Lecture 02 12.1 Joint prior distribution 12.2 Example: inflatable world 12.3 Grid approximation", " 12 Lecture 02 12.1 Joint prior distribution The joint prior distribution is the prior probability of distribution + parameters 12.2 Example: inflatable world 12.2.1 Design the model p: water proportion 1-p: land proportion 12.2.2 Condition Bayes updating: converts priors to posteriors Adds all data at once All posteriors are the prior for next observation Sample size is embodied in the posterior 12.2.3 Evaluate Golem must be supervised Did it malfunction? Does the answer make sense? … 12.2.4 Define parameters N: fixed by experimenter W: a probability distribution, in this case a binomial distribution WLWWLWWLW dbinom(6, size = 9, prob = 0.5) p: prior probability distribution, in this case uniformed 12.2.5 Joint model W ~ Binomial(N, p) p ~ Uniform(0, 1) (W is distributed binomially with probability p on each measure, p is uniform at 1) 12.2.6 Posterior Posterior = (probability observed variables * prior) / normalizing constant (If priors are uniform, they don’t affect the shape of the posterior. They may influence the shape though) 12.3 Grid approximation Grid approximation: consider only a finite discrete set of solutions For example, 1000 solutions Generate a sequence of solutions seq_sol &lt;- seq(0, 1, length.out = 1000) Prior = uniform 1 across sequence of solutions prior &lt;- rep(1, seq_sol) Probability of data = binomial prob_data &lt;- dbinom(6, size = 9, prob = seq_sol) Posterior numerator = posterior_num &lt;- prior * prob_data Posterior standardized = posterior_numerator / sum(posterior_num) 12.3.1 Sampling from the posterior Approximate the posterior, then you can sample from the posteriors sample(p, prob = posterior, 1e4, replace = TRUE) Summarize above/below some value Percentile interval Highest posterior density interval … Predictive checks rbinorm(1e4, size = 0, prob = samples) … "],["lecture-03.html", "13 Lecture 03 13.1 Regressions 13.2 Normal distributions 13.3 Prior predictive distributions 13.4 Quadratic approximate 13.5 Centering variables", " 13 Lecture 03 13.1 Regressions Model of mean and variance of some normally distributed measure Mean as additive combination of weighted variables Typical assumed constant variable (???) The line returned is the mean - but with Bayesian we want to see the distribution of lines, ranked by plausibility The model endorses the line, but the line doesn’t necessarily fit the data In regressions there will always be more certainty at the means and bow tie towards the limits of the data Regression models don’t have arrows like DAGs - they just measure associations. 13.2 Normal distributions Normal distributions arise when repeated fluctuations tend to cancel near 0 The Gaussian distribution is the most conservative distribution to use for a prior, it is the best option if no additional scientific information is available 13.3 Prior predictive distributions Simulate from the joint posterior distribution and evaluate Setup model with quap prior &lt;- extract.prior(model) link(model, post = prior, data = seq) where the seq is a sequence of your x variable (eg for standardize -2, 2 Plot lines These are all the possibility give the prior, not the data If the lines show such a limited relationship that you’d expect that the true relationship is outside of these, expand the priors. If alternatively they are widely implausible, tighten the priors. 13.4 Quadratic approximate In a multidimensional space, QUAP uses gradient climbing to find peaks Maximum likelihood estimation = QUAP with flat priors Function in rethinking is rethinking::quap 13.5 Centering variables x - mean(x) Should be default behavior when doing a regression "],["lecture-04.html", "14 Lecture 04 14.1 Standardizing variables 14.2 Plotting uncertainty - sample from posterior 14.3 Polynomials 14.4 Splines 14.5 Basis splines", " 14 Lecture 04 14.1 Standardizing variables (x - mean(x)) / sd(x) or scale(x) Result = mean of 0, sd of 1 Helps software fit Value = 1 is equal to 1 SD 14.2 Plotting uncertainty - sample from posterior (if multivariate normal) Approximate posterior from mean, standard deviation Sample from multivariate normal distribution of parameters Use samples to generate predictions that integrate over uncertainty extract_samples returns a, b, sigma, … and you can plot each 14.3 Polynomials Polynomials have bad behavior especially at the boundaries of the data They don’t fit locally, and are not actually flexibly. Eg. a polynomial of 3rd degree will necessarily have two turns - this has to happen irrespective of the data 14.4 Splines Locally wiggly functions, combined by interpolation Geocentric - describing relationships - not exploring them 14.5 Basis splines Bayesian B-splines = P-splines Similar to linear models but with synthetic variables \\(\\mu = \\alpha + w_{1} \\beta_{1} + + w_{2} \\beta_{2} + + w_{3} \\beta_{3} + + w_{4} \\beta_{4} + ...\\) Knots are often picked at equal intervals in data, though strategies vary At each knot, the knot’s function is at 100%, moving away from it, the neighboring functions turn on Parameters always have more uncertainty than predictions Caution: over fitting 14.5.1 Recipe Choose knots - points where spline pivots Choose degree of basis functions - how wiggly, polynomial Find posterior distribution of weights "],["lecture-05.html", "15 Lecture 05 15.1 Multiple regression models 15.2 Directed acyclic graphs (DAG) 15.3 Example: Age, marriage, divorce 15.4 Plotting multivariate posteriors 15.5 Reveal masked associations 15.6 Categorical variables", " 15 Lecture 05 15.1 Multiple regression models Why? Spurious associations Determining the value of some predictor given other predictors eg. divorce rate given marriage rate and median age at marriage. Once we know marriage rate, what is the value in knowing median age? 15.2 Directed acyclic graphs (DAG) Directed: arrows, indicating causal implications Acyclic: no loops Unlike statistical models, DAGs have causal implications eg. Median age → marriage rate → divorce rate, Median age → divorce rate 15.3 Example: Age, marriage, divorce \\(D_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta_{M}M_{i} + \\beta_{A}A_{i}\\) (M)arriage rate (A)ge at marriage (D)ivorce rate 15.3.1 Priors Standardize to z-scores \\(\\alpha\\) = expected value for response when all values are 0. since they are all standardized the response should be 0. Without peaking at the data, this could be hard to guess. But after standardization, it is much simpler. Slopes - use prior predictive simulation. Harder. 15.3.2 Prior predictive simulation See Prior predictive distributions 15.3.3 Interpretation Once we know median age at marriage, there is little additional value in knowing marriage rate. Once we know marriage rate, there is still value in knowing median age at marriage. If we don’t know median, it is still useful to know marriage rate, since median age at marriage is related to marriage rate. However, we don’t want to try and influence eg. policy on marriage rate, since it isn’t causal on divorce rate. 15.4 Plotting multivariate posteriors Regress predictor on other predictors Compute predictor residuals Regress outcome on residuals Side note: never analyze the residuals. 15.4.1 Posterior predictive checks Compute implied predictions for observed cases Again, regressions will always do well in the area around the mean 15.5 Reveal masked associations Sometimes association between outcome and predictor is masked by another variable This tends to arise when 2 predictors associated with the outcome have opposite effects on it 15.6 Categorical variables Two approaches: Use dummy/indicator variables Use index variables Index variables are much better 15.6.1 Dummy variable “Stand in” variable Eg. male/female column, translated to 0, 1, 0, 0, 1 where 0 female, 1 male Model: \\(h_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha + \\beta_{M}M_{i}\\) In the case of dummy variables, alpha is the mean when M = 0 (female) and beta M is the change in mean when M = 1 (male). Result is 2 intercepts = where alpha alone is for female and alpha + beta M is intercept for males Problem: for k categories, need k-1 dummy variables and need priors for each. also, priors aren’t balanced because of alpha vs beta "],["lecture-06.html", "16 Lecture 06 16.1 Index variable 16.2 Four elemental confounds", " 16 Lecture 06 16.1 Index variable (For unordered, categorical variables) Starts at 1, counts up Same prior can be given to all Extends easily &gt; 2 eg. m &lt;- quap( alist( height ~ dnorm(mu, sigma), mu &lt;- a[sex], a[sex] ~ dnorm(178, 20), sigma ~ dunif(0, 50) ), data = d ) a[sex] and a for each sex and prior for each. directly in precis(m) too. Then you can directly calculate the difference between groups in the posteriors, no need to rerun the model post &lt;- extract.samples(m) post$diff &lt;- post$a[, 1] - post$a[, 2] precis(post) # mean # sigma 27 # a[1] 134 # a[2] 142 # diff -7.7 16.2 Four elemental confounds When inferring the relationships between X and Y… Confounds are not determined by model selection, so we use DAGs. Arrows indicate causation, and statistical information can flow either way. 16.2.1 Notes Regression models don’t have arrows like DAGs - they just measure associations. You can’t tell the difference between the fork and the path given the data alone. Remember DAGs are small world constructs. 16.2.2 The fork X ← Z → Y Z is a common cause of X and Y. Including Z will remove the relationship between X and Y. 16.2.3 The path X → Z → Y Z is along the path of X and Y, mediating the relationship. For example, the influence of treatment on plant height, where treatment has an influence on fungus. T → F → H Since the treatment influences the fungus (a post treatment measure), if we include both the treatment and the fungus, we will see no relationship of treatment on height, only fungus. (once we know fungus, what does treatment tell us - nothing). In this case, the model with both treatment and fungus tells us the relationship between them, but to properly consider the influence of treatment we need to omit fungus Therefore, understanding the relationship between T and F is important, but for determining causality of T on H, we need to omit it from that model. 16.2.4 The collider X → Z ← Y Z is common result of X and Y. X and Y are independent, if you condition on Z. Careful about statistical correlations that do not indicate causation here. 16.2.5 Steps List all paths connecting X (treatment) and Y (outcome) Classify each path as either open or closed. All paths are open unless they contain a collider. Classify each path as backdoor/front door. Backdoor paths have an arrow entering X. Condition on variables in backdoor paths to close them. "],["lecture-07.html", "17 Lecture 07 17.1 Four elemental confounds (continued) 17.2 Over fitting 17.3 Measuring model fit 17.4 Obtaining the regular features", " 17 Lecture 07 17.1 Four elemental confounds (continued) 17.1.1 Unobserved variables Careful about unmeasured variables. They can create confounds, without being directly measured. Eg. (Haunted DAG). G on C. G → P → C, G → C. But unobserved variable U creates a collider: G → P ← U → C. So including P allows the collider to distort the influence on G on C. 17.2 Over fitting Ockham’s razor: “plurality should never be posited without necessity” This isn’t sufficient, because we are usually comparing between models that are more complicated but fit the data better, and models that are less complicated but fit worse. Two major hazards: too simple, not learning enough from data (under fitting) and too complex, learning too much from data (over fitting) Goal = to learn from regular features from the sample, those that will generalize to other samples 17.3 Measuring model fit 17.3.1 R squared Common, not great \\(R_{2} = 1 - \\frac{var(residuals)}{var(outcome)}\\) “Proportion of variance explained” You can get R squared = 1 with a parameter for each data point - perfect fit. This is obviously nonsense. Therefore there’s a trap of picking models solely on their R squared because increase the parameters and you will increase the R squared. 17.4 Obtaining the regular features Regularizing priors Cross validation Information criteria "],["lecture-08.html", "18 Lecture 08 18.1 Information theory 18.2 Divergence 18.3 Estimating divergence 18.4 Regularization 18.5 Cross validation 18.6 Information criteria 18.7 Model selection 18.8 Model comparison", " 18 Lecture 08 18.1 Information theory Information: reduction in uncertainty caused by learning an outcome Therefore it’s a scale of uncertainty, and information theory is a system for deriving a metric of uncertainty Information entropy: uncertainty in a probability distribution is average the log probability of an event. Uncertainty in a distribution, “potential for surprise” entropy(p) - entropy(q) is what we are trying to minimize (where p is true, q is model) 18.2 Divergence \\(D_{KL} = \\sum p_{i} (log(p_{i}) - log(q_{i}))\\) Average difference in log probability between the model q and target p It’s asymmetrical - recall W/L ratio on Earth → Mars and reverse. Expecting few water events coming from Mars and the reverse coming from Earth Since we don’t actually know the “truth,” we can’t use this to directly measure a model But turns out - we don’t need the truth to compare two models, only their average log probability 18.3 Estimating divergence This is the gold standard for scoring models 18.3.1 Log pointwise predictive density lppd Point wise measure of average probability that the model expects the data Using the entire posterior, measures the log probability Summing the vector of lppd returns the total log probability score Larger values are better, indicating larger average accuracy 18.3.2 Deviance Deviance = lppd score * -2 Smaller values are better Note: deviance decreases with more parameters, however out of sample deviance is best in the model with the right number of parameters (simulated example) 18.4 Regularization Must always be skeptical of the sample Regularization: use informative, conservative priors to reduce over fitting (models learn less from sample). This is particularly important for small sample sizes and as a result, for multilevel models. 18.5 Cross validation Without known out of sample measures, you can estimate out of sample deviance Model with some samples left out, and average over the estimate of those samples 18.5.1 LOO Leave one out Pareto-smoothed importance sample (PSIS) loo package 18.6 Information criteria Historically: AIC, a theoretical estimate of the KL distance Assumptions of AIC include priors are flat or overwhelmed by data posterior is essentially Gaussian sample size &gt;&gt; number of parameters k 18.6.1 WAIC Widely Applicable Information Criterion Does not assume Gaussian posterior 18.6.2 Standard error Presented in rethinking::compare and available for LOO or AIC comparisons. The standard error is the approximate standard error of each WAIC. Caution: with small sample sizes, the standard error reported underestimates the uncertainty. To determine if two models can be distinguished, use the standard error of their difference (dSE). Using the compare function, you can get the @dSE slot to return a matrix of dSE for each pair of models. 18.7 Model selection Avoid model selection Score models and apply causal inference to use compare competing models to explain 18.8 Model comparison Model comparison is not causal inference Add and imagine unobserved confounds 18.8.1 Example 1: model mis-selection using WAIC Height 0 → Height 1, Treatment → Fungus → Height 1 F + T, dWAIC = 0 T, dWAIC = 41 intercept = 44 Since f is a pipe on T→F, including it confounds the model AIC does not indicate causal inference, it simply identifies the best model according to the predicted out of sample deviance Model comparison AND causal inference are important 18.8.2 Example 2: primate lifetime Body mass → lifespan, Body mass → brain size → lifespan Relationship of interest: brain size on lifespan M + B, WAIC = 217 B, WAIC = 218 M = 229 Note: when we have different parameters that return similar WAIC, it’s an invitation to poke inside! Inspecting their estimate posterior we notice that the sign of the brain mass parameter flips from negative to positive across models Another approach: since WAIC is point wise we can plot the difference in WAIC for each point across models Comparing life span on Y, and point wise difference in WAIC between the two models on X We see that the model M+B is better for some species eg. Cebus, and the simple B model is better for other species eg. Gorilla Incredible "],["lecture-09.html", "19 Lecture 09 19.1 Conditioning 19.2 Interpreting interactions 19.3 Plotting interactions", " 19 Lecture 09 19.1 Conditioning Interaction of variables on each other Dependence on the state eg. Influence of genes on phenotype depends on environment Approaches Use interacting terms (simplest) Generalized linear models Multilevel models Interactions arise wherever there is a boundary in the outcome space. All GLMs have interactions. In a DAG, an interaction looks like gene → phenotype ← environment But DAGs can’t fully tell you if it’s an interaction Before interaction terms, all variables are simply independent additive terms. 19.1.1 Example: ruggedness “Ruggedness is bad for the economy outside of Africa, but within Africa is it good” Reminder - constrain priors to possible outcome space Scale ruggedness between 0, 1 Constrain change in GDP bc evidently eg GDP x 2 would be a huge effect Keep it reasonable Options Split the data? Run two linear regressions. This means there is no statistical criteria to measure the split. We are interested in the contrast in slope, but to do that we need to use the same model. Add a categorical variable for Africa? Use alpha[id] and different estimates for each This means the slope is forced to be the same, but difference intercepts. Relationship is held constant across groups, not what we want. Interaction \\(\\mu_{i} = \\alpha_{CID[i]} + \\beta_{CID[i]}(r_{i} - \\bar{r})\\) Slope and intercept are allowed to vary for each 19.1.2 Example: tulips Tulip blooms, in varying Water and Shade \\(\\mu_{i} = \\alpha + \\beta_{W}W + \\beta_{S}S + \\beta_{W * S}W*S\\) The beta W*S variable is actually a nested linear model 19.2 Interpreting interactions Interpreting interactions is hard The influence of predictors depends upon multiple parameters and their co variation Interactions are symmetric within the data. Eg. effect of continent depends on ruggedness is the same as effect of ruggedness on continent Statistically the same We need to apply our outside knowledge and causal information 19.3 Plotting interactions Use a triptych Vary shade at -1, 0, 1 Plot bloom as response and water on x 19.3.1 Higher order interactions Caution: hard to interpret, hard to estimate "],["lecture-10.html", "20 Lecture 10 20.1 Markov Chain Monte Carlo", " 20 Lecture 10 20.1 Markov Chain Monte Carlo Reminder: Bayesian inference is about calculating the posterior. Bayesian ≠ Markov Chains 4 of the ways to compute the posterior Analytical approach (mostly impossible) Grid approximation (very intensive) Quadratic approximate (limited) MCMC (intensive) Advantages of MCMC You don’t know the posterior yet you can still visit each part of it in proportion to it’s relative probability “Sample from a distribution that we don’t know” 20.1.1 Metropolis algorithm Loop over iterations Record location Generate neighbor location proposals Move based on frequency Converges in the long run, can be used as long as proposals are symmetric 20.1.2 Metropolis Hastings Improvement on Metropolis, does not require the proposals to be symmetrical 20.1.3 Gibbs sampling More efficient version of MH 20.1.4 Hamiltonian Monte Carlo Markov Chain: No memory. Probability solely depends on current state, not past state. No storage. Monte Carlo: Random simulation (eg Monaco casino) MCMC is a numerical technique to solve for the posterior, with several advantages over Metropolis and Gibbs Metropolis and Gibbs use optimization but optimization is not a good strategy in high dimensions (see concentration of measure) Hamiltonian Monte Carlo uses a gradient to avoid the guess + check of Metropolis and Gibbs Especially in high dimensional space, acceptance rate decreases and methods take more time Hamiltonian Monte Carlo: Uses a physics simulation representing the parameter state as a particle Flicks the particle around a friction less log-posterior surface Follows curvature of the surface, so it doesn’t get stuck Uses random direction and random speed Slows as it climbs, speeds as it drops This is much more computationally intensive, but requires less steps, has much fewer rejections It’s also easier to determine if MCMC has failed 20.1.5 Tuning MCMC Step size: time the simulation is run. Increase step size = increase efficiency but overestimates curvature U Turn risk is solved by NUTS (No U Turn Sampler) Warm up phase - finding the step size to maximize acceptance rate. Default = good (half the number of samples) Runs in both directions and gives uncorrelated samples. No need to pick leap frog steps 20.1.6 Stan Stan uses NUTS 20.1.7 ulam Create list of data only what you need ulam with formulas as in quap ulam translates the formulas to Stan Builds the NUTS sampler Sampler runs Returns posterior 20.1.8 Diagnosis Neff: number of effective samples. Can be greater than the number of samples from the Markov Chan. Effective if no autocorrelation Rhat: Convergence diagnostic. 1 is good. Ratio of variance within vs ratio of variance across chains. \"Typically when you have a computational problem, often there’s a problem with your model\" 20.1.9 Checking the chain TODO: p283 "],["lecture-11.html", "21 Lecture 11 21.1 Maximum entropy 21.2 Generalized linear model 21.3 Binomial distribution", " 21 Lecture 11 Flat distributions have the highest entropy and have many more ways that they can be realized 21.1 Maximum entropy Distribution with the largest entropy is the distribution most consistent with stated assumptions For parameters: helps understand priors. What are the constraints that make a prior reasonable? For observations: way to understand likelihood Solving for the posterior = getting the distribution that is as flat as possible and consistent with data within constraints Highest entropy answer = distance to the truth is smaller 21.1.1 Distributions Constraints Maxent distribution Example Real value in interval Uniform Bird proportions Real value, finite variance Gaussian Coin flip Binary events, fixed probability Binomial Marble drawing, globe tossing Non negative real, has mean Exponential Amount of time until event 21.2 Generalized linear model Connect linear model to outcome variable Pick outcome distribution Model its parameter using links to linear models Compute posterior Extends to multivariate relationships and non-linear responses Building blocks of multilevel models Very common and widely applicable 21.2.1 Picking a distribution Mostly exponential family because all are maximum entropy interpretations and arise from natural processes Do not pick by looking at a histogram - no way an aggregate histogram of outcomes unconditional on something else is going to have a relevant distribution Just use principles. Exponential: non negative real. Lambda is a rate and the mean is 1/lambda Binomial: count events emerging from an exponential distribution Poisson: count events, low rate Gamma: sum of exponential Normal: gamma with large mean Tide prediction machine - complex “parameters” at the bottom. “Can understand models if you resist the urge to understand parameters” 21.2.2 Types of outcomes Distances and durations Exponential Gamma Counts Poisson Binomial Multinomial Geometry Monsters Ranks, ordered categories Mixtures Beta binomial Gamma-poisson Etc 21.2.3 Model parameters with a link function Yi ~ Normal(mu, sigma) mu ~ alpha + beta * X Linear regressions and only linear regressions have the same scientific units for both the outcome variable and parameters for the mean Another example - binomial Count: Y ~ Binomial(N, p) (unit is count of something) Probability: P ? alpha + beta * X (unit less) We need some function f(p) = alpha + beta * X 21.3 Binomial distribution Counts of a specific event out of n possible trials min: 0, max: n Constant expected value Maxent: binomial y ~ Binomial(n, p) count successes is distribution binomially with n trials and p probability of success 21.3.1 Link Goal is to map linear model to [0, 1] y ~ Binomial(n, p) logit(p) = alpha + beta * x logit is the log odds Given this link function, priors on the logit scale are the not same shape as priors on the probability scale Prosocial monkey example y ~ Binomial(n, p) logit(p) = alpha[actor] + beta[treatment] * Treatment precis(m) a[1] … a[7] a are the different chimps, the posterior means are on the logit scale b[1] … b[4] b are the treatments, the average log odd deviations after chimp handedness has been considered Investigating extract samples inv_logit to transform to probability score precis It’s really hard to understand just using the precis output therefore Plot on the outcome scale with link = posterior predictive sampling Controlling for handedness here isn’t because of the backdoor criterion. Handedness = noise, controlling for it gives us a more precise criteria "],["lecture-12.html", "22 Lecture 12 22.1 Relative and absolute effects 22.2 Logistic regression 22.3 Simpsons paradox", " 22 Lecture 12 22.1 Relative and absolute effects Effect sizes two ways Relative effect scale: parameters have relative differences in their effect Absolute effect scale: used for predictions Proportional odds eg treatment 4 and 2 post ← extract.samples mean 0.9 = 90% of previous odds Therefore 2→4 expects reduction of odds by 10% But this disregards base rate Risk of relative effects like proportional odds is they don’t consider absolute likelihood Relative shark vs absolute deer - need both 22.2 Logistic regression 0, 1 trials (Bernoulli trials) Aggregate binomial: aggregated from each 0, 1 to counts for each category Example - UC Berkeley 1970s Gender → Department → Acceptance, Gender → Acceptance Recall: regressions are very literal to exactly the question you are asking Model 1 Acceptance ~ Binomial(N, p) logit(p) = alpha [gender] Statistical question: what are the average probabilities of admission by gender across all departments? Causal question: what is the total causal influence of gender? It’s asking for the total effect, not the discrimination effect Therefore, all paths are in play (Gender → Department → Acceptance, Gender → Acceptance) Model 2 Close the backdoor. Acceptance ~ Binomial(N, p) logit(p) = alpha [gender] + beta department Statistical question: what is the average difference in probability of admission for genders within department? Causal question: what is the direct influence of gender? These are equally valid, but different questions. 22.3 Simpsons paradox Flip of covariates sign when adding/removing a variable "],["lecture-13.html", "23 Lecture 13 23.1 Binomial 23.2 Poisson 23.3 Generalized linear madness 23.4 Scientific model 23.5 Survival analysis 23.6 Monsters 23.7 Mixtures", " 23 Lecture 13 23.1 Binomial Outcome is a count from zero to some known upper bound 23.2 Poisson Binomial events with N trials large/unknown and probability of event is small Poisson with varied exposure/offset 23.3 Generalized linear madness Example of oceanic tool complexity Modeled with a poisson link The model outcomes are terrible - though they fit the data, the intercepts don’t pass through origin Wouldn’t we expect zero population = zero tools? Solution is a scientific model 23.4 Scientific model The relationship can be thought of as a change in tools per unit time Change in time = alpha P ^ beta Alpha: innovation rate, P: population per person = each person has some change of inventing something Beta: diminishing returns, saturation effect, “someone else will invent it for you” TODO: read more about this, highlight it, etc The resulting model using this function based in the scientific model is not perfect, but meanings are clearer, the intercept actually goes through 0 This is an ad hoc function, not a link 23.5 Survival analysis Estimate rates by modeling time-to-event Can’t ignore censored cases Left censored: don’t when when time started Right censored: something else cut off end Example cats Time to adoption for observed adoptions is simplest, an exponential function For censored cats use the cumulative distribution take the complement calculate probability no event yet 23.6 Monsters Specialized complex distributions eg. ordered categories, ranks 23.7 Mixtures Blends of stochastic processes eg. varying means, probabilities, rates eg. zero-inflation, hurdles Example monks Number of manuscripts per day Can we infer the number of days they get drunk? Drunkenness is a hidden state There is a probability that they drink or work, and within the work, a probability that they produce 0 or 1+ manuscripts "],["lecture-14.html", "24 Lecture 14 24.1 Ordered categories", " 24 Lecture 14 24.1 Ordered categories Discrete outcomes with defined order, defined min and max But the “distances” between categories is unknown and not metric Hard to model because it isn’t continuous and bounded by min-max but not a count. Solution: use a log-cumulative-odds link probability model TODO fill "],["lecture-15.html", "25 Lecture 15 25.1 Multilevel models 25.2 Varying intercepts 25.3 Shrinkage 25.4 Pooling", " 25 Lecture 15 25.1 Multilevel models Most models forget things about the data as they move from one case to the other Fixed effects: the model forgets everything between clusters. no information is passed between clusters. Multilevel model: remember and pool information Default should be multilevel modeling nearly every case is improved by multilevel modeling if not, it’s just as good Why use multilevel modeling? deal with clustering in data (eg. classroom within schools, students within classrooms, …) handles imbalance in sampling handles pseudo replications 25.2 Varying intercepts Example tadpole Outcome: number surviving Tadpoles in tanks at different densities Model 1 index for each tank Model 2 multilevel with varying intercepts Untitled Varying intercepts = random intercepts “Random” and “varying” unclear Distinction of varying intercepts is the prior learns from the data Adaptive regularization From the example, survival across tanks has some distribution. This distribution is the prior for each tank. And the distribution needs its own prior 25.3 Shrinkage Model doesn’t retrodict samples exactly Shrinkage towards the population mean caused by regularization Larger variation = more shrinkage Less data per cluster = more shrinkage Increased difference from mean = more shrinkage 25.4 Pooling Why are varying effects more accurate than fixed effects? Grand mean - maximum under fitting - complete pooling Fixed effects - maximum over fitting - no pooling Varying effects - adaptive regularization - partial pooling "],["lecture-16.html", "26 Lecture 16 26.1 Multiple clusters 26.2 Divergent transitions 26.3 Posterior predictions with multilevel models", " 26 Lecture 16 26.1 Multiple clusters Example: chimpanzees * block “cross classified” Add actor and block intercepts - alpha for each actor, gamma for each block, beta for each treatment Think of these as an offset \\(\\alpha_{j} \\sim \\text{Normal}(\\bar{\\alpha}, \\sigma_{alpha})\\) \\(\\gamma{j} \\sim \\text{Normal}(0, \\sigma_{gamma})\\) \\(\\bar{\\alpha} \\sim \\text{Normal}(0, 1.5)\\) In this example, sigma for actors shows variation in actors, but sigma for blocks is quite small. Why include blocks then? Because while out of sample predictions are quite similar, the block parameters are aggressively regularized. Random effects have many definitions. These are statistical things used to regularize inference. Doesn’t necessarily have to be only things “not fixed by the experimenter.” 26.2 Divergent transitions Tells you something is numerically inefficient about the model. Solution = switch between different ways of writing the same model. Each transition is a sample path. Since in real physics energy is conserved, if energy isn’t conserved in the physics simulation within the HMM - something went wrong. HMC thankfully reports warnings, whereas Gibbs, Metropolis, etc do not (since they are not a physics simulation) 26.2.1 Solutions for divergent transitions Increase the adapt_delta argument. This results in better step size adaption and, as a consequence, slower exploration. Reparameterize the model Reparameterizing the model takes a “centered” model and transforms it into a “non-centered” model. Even though they are mathematically the same, it helps with sampling. Eg. funnel → gaussian hill Result is a z-score centered, “non-centered,” much easier to sample and yields more effective samples. Chains will also run faster. 26.3 Posterior predictions with multilevel models 26.3.1 Same clusters Proceed as usual Push samples back through the model (eg. link and sim) 26.3.2 New clusters “New chimpanzees” For new population, individual (alpha in above example) parameters are irrelevant Three approaches: “Average” actor - the average chimp statistically at the population mean (alpha bar). Alpha = alpha bar. Replace varying intercept samples with 0s so all actors have average intercept row. Use link or directly simulate. Marginal actor - sample a number of statistical actors and average over the distribution. Extract samples from sigma actor Simulate new varying intercepts Use simulated intercepts to simulate predictions Show samples of actors from posterior Sample and plot individuals simulated from posterior Note the effects at the limits are reduced because of ceiling and floor effects of generalized linear models. Eg near 0-1 bounds, the effects will be reduced. "],["lecture-17.html", "27 Lecture 17 27.1 Varying slopes 27.2 Variance covariance matrix 27.3 Varying slopes model 27.4 Multidimensional shrinkage", " 27 Lecture 17 27.1 Varying slopes Slopes are another feature of the response Making any parameter into a varying effect Split into vector of parameters by cluster Define population clusters Any batch of parameters with exchangeable index values can (“and probably should”) be pooled. Exchangeable = unordered labels. You could treat slopes as a distinct varying effect, but even better than that - relate intercepts to the slopes directly. Since intercepts and slopes are related in the population/math/geometry, features of these units have a correlation structure. 27.1.1 Example - cafes Cafe visits in morning and afternoone, intercepts: average morning wait, slopes: avg difference between afternoon and morning. AAre the slopes and intercepts related? Yes. There is pooling across parameters. The prior is a 2 dimensional Gaussian. There is a vector of means (average intercept, average slope) and a variance-covariance matrix. 27.2 Variance covariance matrix [var covar covar var] 27.3 Varying slopes model \\(W_{i} \\sim \\text{Normal}(\\mu_{i}, \\sigma)\\) \\(\\mu_{i} = \\alpha_{\\text{cafe}[i]} + \\beta_{\\text{cafe}[i}*A_{i}\\) [alpha cafe beta cafe] ~ MVNormal([alpha / beta, S]) Mu i represents the varying intercepts + varying slopes. A i = afternoon/not Multivariate prior: for each cafe, there’s a pair of parameters alpha and beta, distributed with a 2 dimensional normal with averages alpha and beta, and S the covariance matrix. R ~ LKJcorr(2) You can’t assign priors independently. 1 dimensional correlations vary between -1 and 1, and with increasing n dimensions, the correlation remains restricted within these limits. Therefore, if 1 is really big, the other is necessarily smaller. The LKJcorr has one variable eta. eta defines how concentrated from the identity matrix. The density is between -1 and 1. eta = 1 represents a pretty much uniform density. eta &gt; 1 has more concentration around 0, more skeptical of extremes. 27.4 Multidimensional shrinkage Joint distribution of varying effects pools information across slopes and intercepts. Correlation induces shrinkages across dimensions, increasing accuracy. 27.4.1 Example - prosocial chimps, many clusters 4 treatments: partner present/absent, side of table L/R. Can vary by actor and by block. \\(L_{i} \\sim \\text{Binomial}(1, p_{i})\\) \\(\\text{logit}(p_{i}) = \\gamma_{\\text{treatment}} + \\alpha_{\\text{actor, treatment}} + \\beta_{\\text{block, treatment}}\\) Mean effect of treatments, each actor in each treatment, each block in each treatment. Alpha actor, treatment is a matrix of alpha deviation from mean for each actor by treatment Beta block, treatment is a matrix of beta deviation from mean for block by treatment How many parameters is this? 7 individuals * 4 treatments + 6 blocks * 4 treatments + 6 correlations + 4 sigmas = 76 parameters With shrinkage, number of effective parameters will be much lower. 27.4.2 Divergences Because of divergences (which are more common in these models), we need to use the non-centered versions. Simpler to do for univariate models, since we need to factor all parameters out of the prior and into the linear model. How do we factor out a correlation matrix? Cholesky factor "],["lecture-18.html", "28 Lecture 18 28.1 Centering/non-centered 28.2 Multilevel horoscopes 28.3 Other covariance structures 28.4 Instrumental variables 28.5 Social relationoso models", " 28 Lecture 18 28.1 Centering/non-centered not always one or the other that is better in all situations use the reparameterized version if modeling is inefficient check if the number of effective parameters increases after 28.2 Multilevel horoscopes Think about causal model first Draw the DAG Begin with “empty” model with varying intercepts on relevant clusters Standardize predictors Use regularizing priors + prior predictive simulation Add in predictors and vary their slopes Possibly drop varying effects with tiny sigmas Consider two kinds of posterior prediction same units: “what happened in this data?” new units: “what might we expect in new units?” 28.3 Other covariance structures Instrumental variables Social relations model (covariance in behaviour among nodes) Factor analysis Animal model, heritability of phenotype Phylogenetic regressions Spatial autocorrelation 28.4 Instrumental variables Recall: adding variables can introduce confounds, so we use the back door criterion to determine which to include and which may introduce confounds. Sometimes the back door says there is no way to shut it. For example, E-&gt;W, U-&gt;E, U-&gt;W, where U is some unobserved confound U is a confound, but U is unmeasured Solution: an instrument that influences the exposure but not the outcome Q-&gt;E-&gt;W, U-&gt;E, U-&gt;W Where Q in this case, is the quarter of the year someone is born in. E is education, W is wage. Quarter influences 1) when you start school and 2) when you are allowed to quit school, since Q is the calendar year and not biological age. In this example, the confounds are not likely related to quarter, and therefore quarter is a valid instrument. this makes E into a collider U generates a correlation between E, W Q tells us something about deviation in E, separate from the E, W correlation from U Instrumental variables are also called “natural experiments” in biology. They can be limited. They depend greatly on the DAG, and it is hard to find a plausible instrument. Instruments with weak effects are not very useful. 28.5 Social relationoso models Example: giving and receiving rates How to disentangle dyadic offsets, general giving, general receiving rates, etc. Use multiple covariance matrices. 2x2 giving + receiving, 2x2 dij + dji (paired dyad offsets). dij != dji because one may give more than the other. "],["lecture-19.html", "29 Lecture 19 29.1 Gaussian process regression: continuous categories 29.2 Phylogenetic relationship", " 29 Lecture 19 29.1 Gaussian process regression: continuous categories Traditional clusters are discrete, unordered. Every category is equally different from all others. But take, for example, income. There is no reason that every increase or decrease in 1 dollar should be equivalently weighted. Other examples include age, phylogenetic distance, social network distance, etc. There are no obvious cut points, but we know that similar values are more similar. Gaussian process regression considers infite numbers of categories. (Need pooling) 29.1.1 Example: spatial autocorrelation of oceanic tool complexity and population size Construct a distance matrix of distances between the islands. We could improve this by considering sailing distance for example. Recall the model: tool complexity is distributed as poisson. Innovation rate, population size, rate of diminishing returns and loss rate. To add a Gaussian process, add a factor k in front for each population k=0, exactly as expected by model k=-0.5, 60% (exp(-0.5) = 0.6) k=-0.5, 130% (exp(0.25) = 1.3) Gaussian process prior: multivariate gaussian 10x10 covariance (distance in this case) Modelling covariance: covariance between islands i and j is the max covariance multiplied by the rate of decline with distance and the squared distance, added to the variance within self (also called a jitter function so multiple observations of the same island have a different covariance). This is the Gaussian, the bell curve. Linear (Dij) vs squared (Dij^2). Linear assumes that the rate of decline if fastest at the start. Usually not true so we assume a squared term., Result is lower covariance than predicted but much slower decay. 29.2 Phylogenetic relationship Phylogenetic relationships are sort of a proxy for unobserved confounds. Some ways of incorporating phylogenetic information into a GLM: Brownian motion model (PGLS) Ornstein-Uhlenbeck (OU) processes … All use a covariance matrix to represent phylogeny and are in principle a gaussian process regression 29.2.1 Example: primaryes Body size -&gt; "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
